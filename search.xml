<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基础</title>
      <link href="/2024/09/07/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/09/07/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="ls命令的讲解"><a href="#ls命令的讲解" class="headerlink" title="ls命令的讲解"></a>ls命令的讲解</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a 的选项</span><br></pre></td></tr></table></figure><p><em>-a选项，表示：all的意思，即列出全部文件夹（包含隐藏的文件&#x2F;文件夹）</em></p><ul><li>表示是Linux系统的隐藏文件&#x2F;文件夹（只要以.开头的，就能自动隐藏）</li><li>只有通过-a选项，才能看到这些隐藏文件&#x2F;文件夹</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l选项</span><br></pre></td></tr></table></figure><p><em>-l表示：以列表（竖向排列）的形式展示内容并展示更多内容</em></p><h5 id="ls命令选项的组合使用"><a href="#ls命令选项的组合使用" class="headerlink" title="ls命令选项的组合使用"></a>ls命令选项的组合使用</h5><ul><li>ls -l -a</li><li>ls -la</li><li>ls -al</li></ul><p><em>上述三种写法，都是一样的，表示同时应用-l和-a的功能</em></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls命令的 -h选项</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls [-a -l -h] [Linux路径]</span><br></pre></td></tr></table></figure><ul><li>-h表示以阅读的形式，列出文件大小，如K、M、G</li><li>-h选项必须搭配-l一起使用</li></ul><h2 id="cd和pws命令"><a href="#cd和pws命令" class="headerlink" title="cd和pws命令"></a>cd和pws命令</h2><h5 id="cd的切换命令使用"><a href="#cd的切换命令使用" class="headerlink" title="cd的切换命令使用"></a>cd的切换命令使用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: cd [Linux路径]</span><br></pre></td></tr></table></figure><ul><li>cd命令无需选项，只有参数，表示要切到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li></ul><h5 id="pwd查看当前工作目录"><a href="#pwd查看当前工作目录" class="headerlink" title="pwd查看当前工作目录"></a>pwd查看当前工作目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: pwd</span><br></pre></td></tr></table></figure><ul><li>pwd命令，无选项，无参数，直接输入pwd即可</li></ul><h2 id="相对路径、绝对路径和特殊路径符"><a href="#相对路径、绝对路径和特殊路径符" class="headerlink" title="相对路径、绝对路径和特殊路径符"></a>相对路径、绝对路径和特殊路径符</h2><p><strong>绝对路径</strong></p><ul><li>绝对路径：以根目录起点。描述路径的一种写法，路径描述以&#x2F;开头</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/xiaolu/Desktop</span><br></pre></td></tr></table></figure><p><strong>相对路径</strong></p><ul><li>相对路径：以当前目录起点，描述路径的一种写法，路径描述无需以&#x2F;开头</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Desktop</span><br></pre></td></tr></table></figure><p><strong>特殊路径符</strong></p><ul><li>.  表示当前目录，比如cd .&#x2F;Desktop 表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</li><li>..  表示上一级目录，比如：cd .. 即可切换上一级目录，cd ..&#x2F;.. 切换到上二级目录</li><li>~  表示HOME目录，比如：cd ~ 即可切换到HOME目录下或cd ~ &#x2F;Desktop，切换到HOME内的Desktop目录</li></ul><h2 id="创建目录命令-mkdir"><a href="#创建目录命令-mkdir" class="headerlink" title="创建目录命令(mkdir)"></a>创建目录命令(mkdir)</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: mkdir [-p] [Linux路径]</span><br></pre></td></tr></table></figure><ul><li>参数必填，表示Linux的路径，即创建的文件夹的路径，相对路径或绝对路径均可</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法: mkdir -p itcast/good/666</span><br></pre></td></tr></table></figure><h2 id="文件操作命令part1-touch、cat、more"><a href="#文件操作命令part1-touch、cat、more" class="headerlink" title="文件操作命令part1(touch、cat、more)"></a>文件操作命令part1(touch、cat、more)</h2><p><strong>touch创建文件</strong></p><p>可以通过touch命令创建文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: touch Linux路径</span><br><span class="line"></span><br><span class="line">写法: touch test.txt</span><br></pre></td></tr></table></figure><ul><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可使用</li></ul><p><strong>cat命令 查看文件内容（参数必填）</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: cat Linux路径</span><br><span class="line"></span><br><span class="line">写法: cat test.txt</span><br></pre></td></tr></table></figure><p><strong>more命令查看文件内容（参数必填）</strong></p><p><strong>more命令同样可以查看文件内容，同cat不同的是:</strong></p><ul><li>cat是直接将内容显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: more Linux路径</span><br><span class="line"></span><br><span class="line">写法: more test.txt</span><br></pre></td></tr></table></figure><ul><li>使用空格进行翻页，使用q退出查看</li></ul><h2 id="文件操作命令part2-cp、mv、rm"><a href="#文件操作命令part2-cp、mv、rm" class="headerlink" title="文件操作命令part2(cp、mv、rm)"></a>文件操作命令part2(cp、mv、rm)</h2><p><strong>cp命令复制文件文件夹</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: cp [-r] 参数1 参数2</span><br><span class="line"></span><br><span class="line">文件写法: cp test1.txt test2.txt</span><br><span class="line"></span><br><span class="line">文件夹写法: cp -r itcast itcast2</span><br></pre></td></tr></table></figure><ul><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件或者文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li></ul><p><strong>mv移动文件或文件夹</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: mv 参数1 参数2</span><br><span class="line"></span><br><span class="line">文件写法: mv test1.txt  itcast/</span><br><span class="line"></span><br><span class="line">改名写法: mv test1.txt test2.txt</span><br><span class="line"></span><br><span class="line">文件夹写法: mv itcast Desktop/</span><br></pre></td></tr></table></figure><p><strong>rm删除文件、文件夹</strong></p><p>rm命令可用于删除文件、文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: rm [-r -f] 参数1 参数2......参数n</span><br></pre></td></tr></table></figure><ul><li>同cp命令一样，-r选项用于删除文件夹</li><li>-f表示force，强制删除(不会弹出提示确认信息)<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容才会有提示</li><li>所以一般普通用户用不到-f选项</li></ul></li><li>参数1、参数2、…….、参数N表示要删除的文件或文件夹路径，按照空格隔开</li></ul><p><strong>rm删除文件、文件夹-通配符</strong></p><p>rm命令支持通配符*,用来做迷糊匹配</p><ul><li>符号*表示通配符，即可任意匹配(包含空)</li><li>test*，表示匹配任何以test开头的内容</li><li>*test，表示匹配任合以test结尾的内容</li><li>*test *，表示匹配任何包含test的内容</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法1: rm -r test*</span><br><span class="line"></span><br><span class="line">写法2: rm -r *test</span><br><span class="line"></span><br><span class="line">写法3: rm -r *test*</span><br></pre></td></tr></table></figure><p>如下命令，千万不要在root管理员用户下执行：</p><p>等同于在Windows上执行C盘格式化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /</span><br><span class="line">rm -rf *</span><br></pre></td></tr></table></figure><h2 id="查找命令-which、find"><a href="#查找命令-which、find" class="headerlink" title="查找命令(which、find)"></a>查找命令(which、find)</h2><p><strong>which命令</strong></p><p>我们可以通过which命令，查看所有使用的一系列命令的程序文件存放在哪里</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: which 要查找的命令 </span><br><span class="line"></span><br><span class="line">写法1: which cd</span><br><span class="line">写法2: which pwd</span><br><span class="line">写法3: which touch</span><br></pre></td></tr></table></figure><p><strong>find命令-按文件命查找文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: find 起始路径 -name &quot;被查找文件命&quot;</span><br><span class="line"></span><br><span class="line">写法1: find / -name &quot;test&quot; # 全盘搜索test</span><br><span class="line"></span><br><span class="line">写法2: find etc -name &quot;test&quot; # 从etc下面搜索test</span><br><span class="line"></span><br><span class="line">写法3: find / -name &quot;*test&quot; # 通配符使用</span><br></pre></td></tr></table></figure><p><strong>find命令-按照文件大小查找文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: find 起始路径 -size + | -n[KMG]</span><br></pre></td></tr></table></figure><ul><li>+、-表示大于和小于</li><li>n表示数字大小</li><li>KMG表示大小单位，K(小写字母)表示kb，M表示MB，G表示GB</li></ul><p>示例:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查找小于10KB的文件: find / -size -10k</span><br><span class="line"></span><br><span class="line">查找大于100MB的文件: find / -size +100M</span><br><span class="line"></span><br><span class="line">查找大于1GB的文件: find / -size +1G</span><br></pre></td></tr></table></figure><h2 id="grep、wc和管道符"><a href="#grep、wc和管道符" class="headerlink" title="grep、wc和管道符"></a>grep、wc和管道符</h2><p><strong>grep命令</strong></p><p>可以通过grep命令，从文件中通过关键字过滤文件行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: grep [-n] 关键字 文件路径</span><br><span class="line"></span><br><span class="line">写法1: grep &quot;itcast&quot; test.txt</span><br><span class="line"></span><br><span class="line">写法2: grep -n &quot;itcast&quot; test.txt # 显示行号</span><br></pre></td></tr></table></figure><ul><li>选项-n，可选，表示在结果中显示匹配的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用 “ “ 将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><p><strong>wc命令做数量统计</strong></p><p>可以通过wc命令统计文件的行数、单纯数量等</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: wc [-c -m -l -w] 文件路径</span><br></pre></td></tr></table></figure><ul><li>选项，-c，统计bytes字节数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><p><strong>管道符的使用</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: cat 文件路径 | grep &quot;关键字&quot;</span><br><span class="line"></span><br><span class="line">写法: cat test.txt | grep &quot;itcast&quot;</span><br></pre></td></tr></table></figure><h2 id="echo、tail和重定向符"><a href="#echo、tail和重定向符" class="headerlink" title="echo、tail和重定向符"></a>echo、tail和重定向符</h2><p><strong>echo命令</strong></p><p>可以使用echo命令在命令行内输出指定内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: echo 输出的内容</span><br><span class="line"></span><br><span class="line">写法: echo &quot;Hello Linux&quot;</span><br></pre></td></tr></table></figure><p>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用 “ “ 包围</p><p><strong>重定向符</strong></p><ul><li>“&gt;”，将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li><li>“&gt;&gt;”，将左侧命令的结果，追加到写入到符号的右侧指定文件中</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法1: echo &quot;Hello Linux&quot; &gt; test.txt # 覆盖</span><br><span class="line"></span><br><span class="line">写法2: echo &quot;Hello itcast&quot; # 追加</span><br></pre></td></tr></table></figure><p><strong>tail命令</strong></p><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: tail [-f -num] Linux路径</span><br><span class="line"></span><br><span class="line">写法1: tail -f test-txt</span><br><span class="line"></span><br><span class="line">写法2: tail -5 test.txt # -num</span><br></pre></td></tr></table></figure><ul><li>参数，Linux路径，表示被跟踪的文件路径</li><li>选项，-f，表示持效跟踪</li><li>选项，-num，表示，查看尾部多少行，默认10行</li></ul><h2 id="vi、vim编辑器"><a href="#vi、vim编辑器" class="headerlink" title="vi、vim编辑器"></a>vi、vim编辑器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: vi 文件路径</span><br><span class="line"></span><br><span class="line">语法: vim 文件路径</span><br></pre></td></tr></table></figure><ul><li>如果文件路径表示的文件不存在，那么此命令用于编辑新文件</li><li>如果文件路径表示文件存在，那么此命令用于编辑已有文件</li><li>输入完后，按esc回退命令模式</li><li>在底线命令输入:wq,保存文件并退出vi编辑器</li></ul><h3 id="命令快捷键"><a href="#命令快捷键" class="headerlink" title="命令快捷键"></a>命令快捷键</h3><table><thead><tr><th>模式</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>命令模式</td><td>i</td><td>在当前光标位置进入<strong>输入模式</strong></td></tr><tr><td>命令模式</td><td>a</td><td>在当前光标位置 之后进入 输<strong>入模式</strong></td></tr><tr><td>命令模式</td><td>I</td><td>在当前行的开头，进入<strong>输入模式</strong></td></tr><tr><td>命令模式</td><td>A</td><td>在当前行的结尾，进入<strong>输入模式</strong></td></tr><tr><td>命令模式</td><td>o</td><td>在当前光标下一行进入<strong>输入模式</strong></td></tr><tr><td>命令模式</td><td>O</td><td>在当前光标上一行进入<strong>输入模式</strong></td></tr><tr><td>命令模式</td><td>esc</td><td>任何情况下输入<strong>esc</strong>都能回到命令模式</td></tr><tr><td>命令模式</td><td>键盘上、键盘k</td><td>向上移动光标</td></tr><tr><td>命令模式</td><td>键盘下、键盘j</td><td>向下移动光标</td></tr><tr><td>命令模式</td><td>键盘左、键盘h</td><td>向左移动光标</td></tr><tr><td>命令模式</td><td>键盘右、键盘l</td><td>向右移动光标</td></tr><tr><td>命令模式</td><td>0</td><td>移动光标到当前行的开头</td></tr><tr><td>命令模式</td><td>$</td><td>移动光标到当前行的结尾</td></tr><tr><td>命令模式</td><td>pageup(PgUp)</td><td>向上翻页</td></tr><tr><td>命令模式</td><td>pangdown(PgDn)</td><td>向下翻页</td></tr><tr><td>命令模式</td><td>&#x2F;</td><td>进入搜索模式</td></tr><tr><td>命令模式</td><td>n</td><td>向下继续搜索</td></tr><tr><td>命令模式</td><td>N</td><td>向上继续搜索</td></tr><tr><td>命令模式</td><td>dd</td><td>删掉光标所在行的内容</td></tr><tr><td>命令模式</td><td>ndd</td><td>n是数字，表示删除当前光标向下的n行</td></tr><tr><td>命令模式</td><td>yy</td><td>复制当前行</td></tr><tr><td>命令模式</td><td>nyy</td><td>n是数字，复制当前行和下面的n行</td></tr><tr><td>命令模式</td><td>p</td><td>粘贴复制内容</td></tr><tr><td>命令模式</td><td>u</td><td>撤销修改</td></tr><tr><td>命令模式</td><td>ctrl + r</td><td>反撤销修改</td></tr><tr><td>命令模式</td><td>gg</td><td>跳到首行</td></tr><tr><td>命令模式</td><td>G</td><td>跳到结尾</td></tr><tr><td>命令模式</td><td>dG</td><td>从当前行开始，向下全部删除</td></tr><tr><td>命令模式</td><td>dgg</td><td>从当前行开始，向上全部删除</td></tr><tr><td>命令模式</td><td>d$</td><td>从当前光标开始，删除到本行的结尾</td></tr><tr><td>命令模式</td><td>d0</td><td>从当前光标开始，删除到本行的开头</td></tr></tbody></table><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><table><thead><tr><th>模式</th><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>底线命令模式</td><td>:wq</td><td align="left">保存退出</td></tr><tr><td>底线命令模式</td><td>:q</td><td align="left">仅退出不保存</td></tr><tr><td>底线命令模式</td><td>:!q</td><td align="left">强制退出</td></tr><tr><td>底线命令模式</td><td>:w</td><td align="left">仅保存</td></tr><tr><td>底线命令模式</td><td>:set nu</td><td align="left">显示行号</td></tr><tr><td>底线命令模式</td><td>:set paste</td><td align="left">设置粘贴模式</td></tr></tbody></table><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><ul><li><strong>创建用户组</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd # 用户组名</span><br></pre></td></tr></table></figure><ul><li><strong>删除用户组</strong></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel # 用户组名</span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a><strong>创建用户</strong></h4></li></ul><p><strong>useradd [-g -d]用户名</strong></p><ul><li>选项：-g指定用户组，不指定-g，会创建同名组并自动加入，指定-g需要组已存在，如已存在同名组，必须使用-g</li><li>选项：-d指定用户HOME路径，不指定，HOME目录默认在：&#x2F;home&#x2F;用户名</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法1: useradd test # 不指定</span><br><span class="line"> </span><br><span class="line">写法2: useradd test -g xiaolu -d /home/test2 # 指定用户组</span><br></pre></td></tr></table></figure><ul><li><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a><strong>删除用户</strong></h4></li></ul><p><strong>userdel[-r]用户名</strong></p><ul><li>选项：-r删除用户的HOME目录，不使用-r，删除用户时，home目录保留</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法1: userdel test</span><br><span class="line">写法2: userdel -r test </span><br></pre></td></tr></table></figure><ul><li><h4 id="查看用户所属组"><a href="#查看用户所属组" class="headerlink" title="查看用户所属组"></a><strong>查看用户所属组</strong></h4></li></ul><p><strong>id[用户名]</strong></p><ul><li><p>参数：用户名，被查看的用户，如果不提供则查看自身</p></li><li><h4 id="修改用户所属组"><a href="#修改用户所属组" class="headerlink" title="修改用户所属组"></a><strong>修改用户所属组</strong></h4></li></ul><p>usermod-aG 用户组 用户名，将指定用户加入只当用户组</p><ul><li><h4 id="getent查询当前系统中有哪些用户"><a href="#getent查询当前系统中有哪些用户" class="headerlink" title="getent查询当前系统中有哪些用户"></a><strong>getent查询当前系统中有哪些用户</strong></h4></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">写法1: getent passwd # 查看系统全部用户信息</span><br><span class="line"></span><br><span class="line">写法2: getent group # 查看系统全部组信息</span><br></pre></td></tr></table></figure><p>共有7份信息，分别是:</p><p>用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</p><h2 id="查看权限控制"><a href="#查看权限控制" class="headerlink" title="查看权限控制"></a>查看权限控制</h2><p>所属用户权限</p><ul><li>-表示文件</li><li>d表示文件夹</li><li>l表示软链接</li></ul><p><strong>权限意思</strong></p><ul><li>r：read可读取</li><li>w：write可写入</li><li>x：execute可执行</li></ul><p><strong>针对文件，文件夹的不同，rwx的含义有细微差别</strong></p><ul><li>r，针对文件可以查看文件内容<ul><li>针对文件夹，可以查看文件内容，如ls命令</li></ul></li><li>w，针对文件表示可以修改文件<ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li>x，针对文件表示可以将文件作为程序执行<ul><li>针对文件夹，可以表示更改工作目录到此文件夹，即cd进入</li></ul></li></ul><h3 id="ls-l列出的权限信息如何解读"><a href="#ls-l列出的权限信息如何解读" class="headerlink" title="ls -l列出的权限信息如何解读"></a>ls -l列出的权限信息如何解读</h3><ul><li><p>序号1，表示文件、文件夹的权限控制信息</p></li><li><p>序号2，表示文件、文件夹所属用户</p></li><li><p>序号3，表示文件、文件夹所属用户组</p></li></ul><h2 id="修改权限控制-chmod"><a href="#修改权限控制-chmod" class="headerlink" title="修改权限控制 - chmod"></a>修改权限控制 - chmod</h2><p>我们可以使用chmod命令，修改文件、文件夹的权限信息。</p><p>注意，只有文件，文件夹的所属用户或root用户可以修改。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: chmod [-R] 权限 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项：-R，对文件内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt，将文件权限修改为:rwxr-x–x<ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其它用户权限</li></ul></li><li>chmod -R u&#x3D;rwx,g&#x3D;rx,o&#x3D;x test，将文件夹test以及文件夹内全部内容权限设置为:rwxr-x–x</li></ul><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><p>权限可以用3位数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其他用户权限。</p><p>数字的细节如下:r记为4，w记为2，x记为1，可以有：</p><ul><li>0：无任何权限，即 —</li><li>1：仅有x权限，即 –x</li><li>2：仅有w权限，即 -w-</li><li>3有w和x权限，即 -wx</li><li>4既有r权限，即 r–</li><li>5有r和x权限，即 r-x</li><li>6有r和w权限，即 rw-</li><li>7有全部权限，即 rwx</li></ul><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p>使用chown命令，可以修改文件、文件夹的所属用户和用户组</p><p>普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: chown [-R] [用户] [:] [用户组] 文件或文件夹</span><br></pre></td></tr></table></figure><ul><li>选项，-R，同chmod，对文件夹内全部内容应用相同规则</li><li>选项，用户，修改所属用户</li><li>选项，用户组，修改所属用户组</li><li>: 用于分割用户和用户组</li></ul><p><strong>示例:</strong></p><ul><li>chown root hello.txt，将hello.txt所属用户修改为root</li><li>chown :root hello.txt，将hello.txt所属用户组修改为root</li><li>chown root:itcast hello.txt，将hello.txt所属用户修改为root，用户组修改为itcast</li><li>chown -R root test，将文件夹test所属用户修改为root并对文件夹内全部内容应用同样规则</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><strong>历史命令搜索</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history</span><br></pre></td></tr></table></figure><p><strong>光标移动快捷键</strong></p><ul><li>ctrl + a,跳到命令开头</li><li>ctrl + e,跳到命令结尾</li><li>ctrl + 键盘左键，向左跳一个单词</li><li>ctrl + 键盘右键，向右跳一个单词</li></ul><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h4 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h4><p>yum:RPM软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: yum [-y] [install] | remove | search 软件名称</span><br></pre></td></tr></table></figure><ul><li>语法: yum [-y],自动确认，无需手动确认安装或卸载过程</li><li>install：安装</li><li>remove：卸载</li><li>search：搜索</li></ul><p>yum命令需要root权限，可以su切换到root下，或者使用sudo提权。</p><p>yum命令需要联网</p><p>通过yum命令安装wget程序</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>如果安装报错了输入这条命令试一下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h4 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: apt [-y] [install] | remove | search 软件名称</span><br></pre></td></tr></table></figure><h2 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h2><p>Linux系统很多软件（内置或第三方）均支持使用systemcrtl命令控制：启动、停止、开机自启</p><p>能够被systemctl管理的软件，一般也称之为：服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: systemctl start | stop | status | enable | disable 服务名称</span><br></pre></td></tr></table></figure><ul><li>start：启动</li><li>stop：停止</li><li>status：查看状态</li><li>enable：开启开机自启</li><li>disable：关闭开机自启</li></ul><p><strong>系统内置的服务比较多，比如：</strong></p><ul><li>NetworkManager,主网络服务</li><li>network，副网络服务</li><li>firewalld，防火墙服务</li><li>sshd，shh服务（FinalShell远程登陆Linux使用的就是这个服务）</li></ul><h2 id="掌握使用ln命令创建软链接"><a href="#掌握使用ln命令创建软链接" class="headerlink" title="掌握使用ln命令创建软链接"></a>掌握使用ln命令创建软链接</h2><p>在系统中创建软链接，可以讲文件、文件夹链接到其他位置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法: ln -s 参数1 参数2</span><br></pre></td></tr></table></figure><ul><li>-s选项，创建软链接</li><li>参数1：被链接的文件或者文件夹</li><li>参数2：要链接去的目的地</li></ul><p><strong>示例：</strong></p><ul><li>ln -s &#x2F;etc&#x2F;yum.conf ~&#x2F;yum.conf</li><li>ln -s &#x2F;etc&#x2F;yum ~&#x2F;yum</li></ul><h2 id="日期和时区"><a href="#日期和时区" class="headerlink" title="日期和时区"></a>日期和时区</h2><p>通过date命令可以在命令行中查看系统的时间</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">语法：date [-d] [+格式化字符串]</span><br></pre></td></tr></table></figure><ul><li>-d按照给定的字符串显示日期，一般用于日期计算</li><li>格式化字符串：通过特定的字符串标记，来控制显示的日期格式<ul><li>%Y 年</li><li>%y 年份后两位数（00..99）</li><li>%m 月份（01..02）</li><li>%d 日（01..31）</li><li>%H 小时（00.23）</li><li>%M 分钟（00.59）</li><li>%S 秒（00.60）</li><li>%s 自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>使用root权限，执行如下命令，修改时区喂东八区时区</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /etc/localtime </span><br><span class="line">sudo ln -s /usr/share/zoneinfo/Asia/Guangxi /etc/localtime</span><br></pre></td></tr></table></figure><p>讲系统自带的localtime文件删除，并将&#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Guangxi文件链接到localtime文件即可</p><h4 id="ntp程序"><a href="#ntp程序" class="headerlink" title="ntp程序"></a>ntp程序</h4><p>可以通过mtp程序自动校准系统时间</p><p>安装ntp：yum -y install ntp</p><p>启动并设置开机自启</p><ul><li>systemctl start ntpd </li><li>systemctl enable ntpd</li></ul><p>当ntpd启动后定期的帮助我们联网校准系统的时间</p><p>也可以手动校准（需要root权限）：ntpdate -u ntp.aliyun.com</p><h2 id="IP地址、主机名"><a href="#IP地址、主机名" class="headerlink" title="IP地址、主机名"></a>IP地址、主机名</h2><p>可以使用命令：hostname查看主机名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>可以使用命令：hostnamectl set-hostname （主机名），修改主机名（需要root权限）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第十套题</title>
      <link href="/2024/01/25/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%8D%81%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/25/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%8D%81%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第十套题"><a href="#第十套题" class="headerlink" title="第十套题"></a>第十套题</h1><h1 id="一、python部分"><a href="#一、python部分" class="headerlink" title="一、python部分"></a>一、python部分</h1><h2 id="1、数据处理"><a href="#1、数据处理" class="headerlink" title="1、数据处理"></a>1、数据处理</h2><p> 1 、删除 hotel.csv 中 商 圈 为 空 的 数 据 并 且 存 入 hotel2_c1_N.csv,N 为删除的数据条数；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/hotel.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># print(df.info())</span></span><br><span class="line"><span class="comment"># 删除 hotel.csv 中 商 圈 为 空 的 数 据 并 且 存 入 hotel2_c1_N.csv,N 为删除的数据条数；</span></span><br><span class="line">df_1 = df.dropna(subset=<span class="string">&#x27;shopping&#x27;</span>)</span><br><span class="line">df_2 = <span class="built_in">len</span>(df)-<span class="built_in">len</span>(df_1)</span><br><span class="line"><span class="built_in">print</span>(df_2)</span><br><span class="line">df_1.to_csv(<span class="string">f&#x27;hotel2_c1_<span class="subst">&#123;df_2&#125;</span>.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 2、删除 hotel.csv 中缺失值大于 3 个的数据列并且存 入 hotel2_c2_N.csv,N 为删除的数据列变量名，多列时用下 划线“_”间隔无顺序要求；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/hotel.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 hotel.csv 中缺失值大于 3 个的数据列并且存入 hotel2_c2_N.csv,N 为删除的数据列变量名，多列时用下 划线“_”间隔无顺序要求；</span></span><br><span class="line"></span><br><span class="line">df_1 = df.columns[df.isnull().<span class="built_in">sum</span>() &gt; <span class="number">3</span>]</span><br><span class="line">df_2 = <span class="string">&#x27;_&#x27;</span>.join(df_1)</span><br><span class="line">df_3 = <span class="built_in">len</span>(df) - <span class="built_in">len</span>(df_2)</span><br><span class="line"><span class="built_in">print</span>(df_3)</span><br><span class="line">df.drop(df_3)</span><br><span class="line">df.to_csv(<span class="string">F&#x27;hotel2_c2_<span class="subst">&#123;df_3&#125;</span>.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 3、将 hotel.csv 中评分为空的数据设置为 0 并且存入 hotel2_c3.csv； </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/hotel.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"><span class="comment"># 将 hotel.csv 中评分为空的数据设置为 0 并且存入 hotel2_c3.csv；</span></span><br><span class="line">df_1 = df[<span class="string">&#x27;score&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(df_1)</span><br><span class="line">df_1.to_csv(<span class="string">&#x27;hotel2_c3.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4、将 hotel.csv 中评分为空的数据设置为总平均评分 并且存入 hotel2_c4_N.csv，N 为总平均评分保留一位小数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/hotel.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># print(df.info())</span></span><br><span class="line"><span class="comment"># 将 hotel.csv 中评分为空的数据设置为总平均评分 并且存入 hotel2_c4_N.csv，N 为总平均评分保留一位小数</span></span><br><span class="line"></span><br><span class="line">df_1 = <span class="built_in">round</span>(df[<span class="string">&#x27;score&#x27;</span>].mean(), <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;平均评分为:&#x27;</span>,df_1)</span><br><span class="line"></span><br><span class="line">df_2 = df[<span class="string">&#x27;score&#x27;</span>].fillna(df_1)</span><br><span class="line">df_2.to_csv(<span class="string">F&#x27;hotel2_c4_<span class="subst">&#123;df_1&#125;</span>.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="2、数据标注"><a href="#2、数据标注" class="headerlink" title="2、数据标注"></a>2、数据标注</h2><p>使用 SnowNLP 对酒店评论数据 hotel_comment.csv 进行 标注，获取情感倾向评分（sentiments）,具体的标注规则 如下： 对情感倾向分数大于等于 0.6 的评论数据标注为正向； 对情感倾向分数大于 0.4 小于 0.6 的评论数据标注为中 性； 对情感倾向分数小于等于 0.4 的评论数据标注为负向。 根据采集到的评论信息，给出三类标注好的数据。存入standard.csv中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/hotel_comment.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断得出情感值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ananly</span>(<span class="params">comment</span>):</span><br><span class="line">    qing = SnowNLP(comment).sentiments</span><br><span class="line">    <span class="keyword">if</span> qing &gt;= <span class="number">0.6</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;正向&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> qing &gt;= <span class="number">0.4</span> <span class="keyword">or</span> qing &lt;= <span class="number">0.6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;中性&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> qing &lt;= <span class="number">0.4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;负向&#x27;</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;情感倾向&#x27;</span>] = df[<span class="string">&#x27;评论信息&#x27;</span>].apply(ananly)</span><br><span class="line">df[<span class="string">&#x27;备注&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">zheng = df[df[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;正向&#x27;</span>]</span><br><span class="line">zhong = df[df[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;中性&#x27;</span>]</span><br><span class="line">fu = df[df[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;负向&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并数据</span></span><br><span class="line">df = pd.concat([zheng,zhong,fu], ignore_index=<span class="literal">True</span>)</span><br><span class="line">df = df.sort_values(by=<span class="string">&#x27;情感倾向&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sample(<span class="number">10</span>))</span><br><span class="line">df[[<span class="string">&#x27;编号&#x27;</span>,<span class="string">&#x27;酒店名称&#x27;</span>,<span class="string">&#x27;评论信息&#x27;</span>,<span class="string">&#x27;情感倾向&#x27;</span>,<span class="string">&#x27;备注&#x27;</span>]].to_csv(<span class="string">&#x27;standard.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、数据统计"><a href="#二、数据统计" class="headerlink" title="二、数据统计"></a>二、数据统计</h1><h2 id="hdfs操作"><a href="#hdfs操作" class="headerlink" title="hdfs操作"></a>hdfs操作</h2><p>1.首先你要将user_info.csv拷贝到root下和hdfs上面</p><p><strong>1.本地命令拷贝</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r 你存放文件的地方目录 root:你的机子ip地址:/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span> </span><br><span class="line">scp -r user_info.csv root@172.16.7.6:/root </span><br></pre></td></tr></table></figure><p>2、创建文件夹</p><p>1.在 HDFS 目录下新建目录&#x2F;file2_1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /file2_1</span><br></pre></td></tr></table></figure><p>2.查看目录命令截图</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>3、修改权限</p><p>1.修改权限，赋予目录&#x2F;file2_1 最高 777 权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chmod 777 /file2_1</span><br></pre></td></tr></table></figure><p>2.查看 目录权限截图</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>4、下载 HDFS 新建目录&#x2F;file2_1，到本地容器 Master 指定目录&#x2F;root&#x2F;下</p><ol><li>​<strong>-get是下载</strong></li><li>​<strong>-put是上传</strong></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get  /file2-1 /root/</span><br></pre></td></tr></table></figure><p>查看一下root是否成功下载下来file2_1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>6.如果遇到：</p><p><strong>mkdir: Cannot create directory &#x2F;input. Name node is in safe mode.（意思是hadoop安全模式正在开启，要关掉才可以新建）</strong></p><p><strong>hadoop强制关掉安全模式:</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -safemode forceExit</span><br></pre></td></tr></table></figure><p>出现：<strong>Safe mode is OFF</strong> 就代表关掉成功了</p><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p><strong>编 写 MapReduce 程 序 ， 实 现 以 下 功 能 ： 将 user_info.csv 数据的分隔符“，”转换为“|”，输出文件到 HDFS，然后在在控制台按顺序打印输出前 10 条数据，将结 果截图粘贴至客户端桌面【Release\任务 E 提交结果.docx】 中对应的任务序号下。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task05</span> &#123;</span><br><span class="line">    <span class="comment">// 设置 输入输出路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置Job类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task05&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task05.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">// 设置 文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 设置 hdfs路径</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> outpath.getFileSystem(conf);</span><br><span class="line">        <span class="comment">// 判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, NullWritable&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个 Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个map</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串 并且将逗号转换成 |</span></span><br><span class="line">            status.set(value.toString().replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">            <span class="comment">// 输出</span></span><br><span class="line">            context.write(status, NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p><strong>编写 Spark 程序，实现以下功能：对于 gender 这一字 段统计电商消费人数男女数量，将结果写入 HDFS 中，格式 为：(性别,人数)，如：(男,10)，在控制台读取 HDFS 文件 输 出 男 女 各 多 少 人 ， 将 结 果 截 图 粘 贴 至 客 户 端 桌 面 【Release\任务 E 提交结果.docx】中对应的任务序号下.</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.checkerframework.checker.units.qual.C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 常量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义一个 Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个 map 接收</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 以逗号分割得出数组</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度</span></span><br><span class="line">            <span class="keyword">if</span>(fields.length &gt;= <span class="number">13</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取 gender字段</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">genders</span> <span class="operator">=</span> fields[<span class="number">10</span>];</span><br><span class="line">                <span class="comment">// 设置 status 为 gender</span></span><br><span class="line">                status.set(genders);</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                context.write(status, one);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个 Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 Treemap</span></span><br><span class="line">        <span class="keyword">private</span> TreeMap&lt;Integer, String&gt; result = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义一个 reduce 接收</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">//  定义一个 sum 为 0</span></span><br><span class="line">            <span class="type">int</span>  <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历value 累加 sum</span></span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values)&#123;</span><br><span class="line">                sum += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 result 为 sum</span></span><br><span class="line">            result.put(sum, key.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在定义一个 Treemap</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 重新定义一个Treemap</span></span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry :  result.descendingMap().entrySet())&#123;</span><br><span class="line">                <span class="comment">// 获取key计数值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="comment">// 获取 value 字符串值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fields</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(fields), <span class="keyword">new</span> <span class="title class_">IntWritable</span>(count));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置输入输出路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task06&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task06.class);</span><br><span class="line">        <span class="comment">// 设置map类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 值</span></span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置 输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一步运行JAR环境包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第三套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第十套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第八套题</title>
      <link href="/2024/01/24/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%85%AB%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/24/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%85%AB%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第八套题"><a href="#第八套题" class="headerlink" title="第八套题:"></a>第八套题:</h1><h1 id="一、Python部分"><a href="#一、Python部分" class="headerlink" title="一、Python部分"></a>一、Python部分</h1><h2 id="1-数据处理"><a href="#1-数据处理" class="headerlink" title="1.数据处理"></a>1.数据处理</h2><p>打印data.csv数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印数据</span></span><br><span class="line"><span class="built_in">print</span>(big_data)</span><br><span class="line"><span class="comment"># 打印字段</span></span><br><span class="line"><span class="built_in">print</span>(big_dta.info())</span><br></pre></td></tr></table></figure><p> <strong>2.子任务二：数据处理</strong> </p><p>现已从相关网站及平台获取到原始数据集，为保障用户 隐私和行业敏感信息，已进行数据脱敏。数据脱敏是指对某 些敏感信息通过脱敏规则进行数据的变形，实现敏感隐私数 据的可靠保护。在涉及客户安全数据或者一些商业性敏感数 据的情况、不违反系统规则条件下，对真实数据进行改造并 提供测试使用，如身份证号、手机号等个人信息都需要进行 数据脱敏。</p><p> 打开 ZZ052-8-M2-T1-SUBT1 文件夹，文件夹中包含 data.csv 文件。你的小组需要通过编写代码或脚本完成对 相关数据文件中数据的清洗和整理。请分析相关数据集， 根据题目规定要求实现数据处理，具体要求如下： </p><p>1.NAN值代表用户未浏览该页面，查看数据，将NAN 替换为0，然后存入data_c1.csv中；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将NAN 替换为0，然后存入data_c1.csv中</span></span><br><span class="line">big_data[<span class="string">&#x27;confirmation_page&#x27;</span>] = big_data[<span class="string">&#x27;confirmation_page&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">big_data.to_csv(<span class="string">&#x27;data_c1.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(big_data)</span><br></pre></td></tr></table></figure><p>第二种</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># # 将NAN 替换为0，然后存入data_c1.csv中</span></span><br><span class="line">big_data = big_data.fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># big_data.to_csv(&#x27;data_c1.csv&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(big_data)</span><br></pre></td></tr></table></figure><p>2.异常值处理：将年龄（age）数字大于等于100的 异常数据删除，然后存入data_c3.csv中； 将上述（1）-（3）任务的代码截图复制粘贴至客户端 10 10 桌面【M2-T1-SUBT2-提交结果 1.docx】中对应的任务序号下。 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常值处理：将年龄（age）数字大于等于100的 异常数据删除，然后存入data_c3.csv中</span></span><br><span class="line">big_data1 = big_data.drop(big_data[big_data[<span class="string">&#x27;age&#x27;</span>] &gt;= <span class="number">100</span>].index)</span><br><span class="line">big_data1.to_csv(<span class="string">&#x27;data_c3.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(big_data1)</span><br></pre></td></tr></table></figure><p><strong>3.缺失值处理</strong> </p><p>①查看缺失值个数；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看缺失值的个数</span></span><br><span class="line"><span class="built_in">print</span>(big_data.isnull().<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure><p> ②处理“source”列缺失值：当用户为新用户，source 缺失值填充为direct，老客户填充seo；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./data/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看缺失值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;source缺失值:&quot;</span>, data[<span class="string">&quot;source&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理“source”列缺失值：当用户为新用户，source 缺失值填充为direct，老客户填充seo；</span></span><br><span class="line">data.loc[data[<span class="string">&quot;market&quot;</span>] &lt;= <span class="number">1</span>, <span class="string">&quot;source&quot;</span>] = <span class="string">&quot;direct&quot;</span></span><br><span class="line">data.loc[data[<span class="string">&quot;market&quot;</span>] &gt; <span class="number">1</span>, <span class="string">&quot;source&quot;</span>] = <span class="string">&quot;seo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;source&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;source缺失值:&quot;</span>, data[<span class="string">&quot;source&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ③处理“device”列缺失值：操作系统为mac，window， linux的设备空值填充为desktop，将操作系统为ioS， android的设备空值填充为mobile，如果为other和NAN值则 填充为众数；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./data/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看缺失值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;device缺失值:&quot;</span>, data[<span class="string">&quot;device&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~ 运算符来取反条件，即找到不在给定列表中的元素  isin() 方法返回一个布尔 Series ~ 运算符来取反条件，即找到不在给定列表中的元素</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;device&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;operative_system&quot;</span>].isin([<span class="string">&quot;mac&quot;</span>, <span class="string">&quot;window&quot;</span>, <span class="string">&quot;linux&quot;</span>])), <span class="string">&quot;device&quot;</span>] = <span class="string">&quot;desktop&quot;</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;device&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;operative_system&quot;</span>].isin([<span class="string">&quot;iOS&quot;</span>, <span class="string">&quot;android&quot;</span>])), <span class="string">&quot;device&quot;</span>] = <span class="string">&quot;mobile&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 &quot;other&quot; 和 NaN 值填充为众数 mode() 函数用于计算列中的众数 通过 [0] 索引，我们可以获取到众数的值</span></span><br><span class="line">data.loc[data[<span class="string">&quot;device&quot;</span>].isin([<span class="string">&quot;other&quot;</span>, np.nan]), <span class="string">&quot;device&quot;</span>] = data[<span class="string">&quot;device&quot;</span>].mode()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;处理后的device&quot;</span>,data[<span class="string">&quot;device&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ④处理“operative_system”缺省值：当用户设备时 mobile时，操作系统填充为iOS，当用户设备为desktop，操 作系统填充为windows。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./data/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operative_system缺失值有:&quot;</span>,data[<span class="string">&quot;operative_system&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;operative_system&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;device&quot;</span>].isin([<span class="string">&quot;mobile&quot;</span>])), <span class="string">&quot;operative_system&quot;</span>] = <span class="string">&quot;iOS&quot;</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;operative_system&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;device&quot;</span>].isin([<span class="string">&quot;desktop&quot;</span>])), <span class="string">&quot;operative_system&quot;</span>] = <span class="string">&quot;windows&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;处理后的operative_system:&quot;</span>,data[<span class="string">&quot;operative_system&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ⑤处理sex缺失值：如果是linux系统，填充为Male，其 他均填充为Female。 所有缺失值处理完后，存入data_c4.csv中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./data/data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sex缺失值有：&quot;</span>,data[<span class="string">&quot;sex&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺失值处理</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;sex&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;operative_system&quot;</span>].isin([<span class="string">&#x27;linux&#x27;</span>])), <span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;Male&quot;</span></span><br><span class="line">data.loc[(data[<span class="string">&quot;sex&quot;</span>].isnull()) &amp; (~data[<span class="string">&quot;operative_system&quot;</span>].isin([])), <span class="string">&quot;sex&quot;</span>] = <span class="string">&quot;Female&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;处理后的sex:&quot;</span>,data[<span class="string">&quot;sex&quot;</span>].isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-数据标注"><a href="#2-数据标注" class="headerlink" title="2.数据标注"></a>2.数据标注</h2><p>对 data_c4.csv 数据进行标注，判断客服是否下单，具 体的标注规则如下： </p><p>（1）如果“confirmation_page”列数据为 1，则数据 标注为‘yes’； </p><p>（2）如果“confirmation_page”列数据为 0，则数据] 标注为‘no’； 标注好的数据存储为列‘subscribe’并和 data_c4.csv 数据合并存入 result.csv。 将代码截图复制粘贴至客户端桌面【M2-T2-SUBT1-提交 结果 1.docx】中对应的任务序号下。 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">big_data = pd.read_csv(<span class="string">&#x27;./csv文档/data.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">config</span>(<span class="params">comment</span>):</span><br><span class="line">    <span class="keyword">if</span> comment == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;yes&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;no&#x27;</span></span><br><span class="line">big_data[<span class="string">&#x27;confirmation_page&#x27;</span>] = big_data[<span class="string">&#x27;new_user&#x27;</span>].apply(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿出数据</span></span><br><span class="line">yes = df[df[<span class="string">&#x27;confirmation_page&#x27;</span>] == <span class="string">&#x27;yes&#x27;</span>]</span><br><span class="line">no = df[df[<span class="string">&#x27;confirmation_page&#x27;</span>] == <span class="string">&#x27;no&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并拿出来的数据</span></span><br><span class="line">df = pd.concat([yes,no], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">big_data.to_csv(<span class="string">&#x27;result.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(big_data)</span><br></pre></td></tr></table></figure><h1 id="二、数据统计"><a href="#二、数据统计" class="headerlink" title="二、数据统计"></a>二、数据统计</h1><h2 id="hdfs操作"><a href="#hdfs操作" class="headerlink" title="hdfs操作"></a>hdfs操作</h2><p> 1.子任务一：HDFS 文件上传下载 本任务需要使用 Hadoop，HDFS 命令，已安装 Hadoop 及 需要配置前置环境，具体要求如下： </p><p>（1）在 Master 中的&#x2F;root&#x2F;目录下新建一个文件 夹:result，将创建文件夹命令与结果截图粘贴至客户端桌 面【M2-T3-SUBT1-提交结果 1.docx】中对应的任务序号下；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /root/result</span><br></pre></td></tr></table></figure><p> （2）使用 HDFS 命令，将 Master 下：&#x2F;root 目录下新建 的文件夹：result 上传到 HDFS 指定目录下：&#x2F;根目录下；并 且使用 HDFS 命令查看目录；将 HDFS 上传，查看命令截图粘 贴至客户端桌面【M2-T3-SUBT1-提交结果 2.docx】中对应的 任务序号下； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /root/result /</span><br></pre></td></tr></table></figure><p>查看:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>（3）使用 HDFS 命令，将 HDFS 目录下的&#x2F;result 文件夹 下载到 Master 指定目录下:根目录下；将下载文件夹命令与 结果截图粘贴至客户端桌面【M2-T3-SUBT1-提交结果 3.docx】 中对应的任务序号下。 </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /result /</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /root/</span><br></pre></td></tr></table></figure><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p><strong>编 写 MapReduce 程 序 ， 实 现 以 下 功 能 ： 将 user_info.csv 数据的分隔符“，”转换为“|”，输出文件到 HDFS，然后在控制台按顺序打印输出前 10 条数据，将结果 截图粘贴至客户端桌面【M2-T3-SUBT2-提交结果 1.docx】中 对应的任务序号下。</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task10</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, NullWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个 map 用来接收</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串 并且逗号转换成 |</span></span><br><span class="line">            status.set(value.toString().replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">            <span class="comment">// 输出</span></span><br><span class="line">            context.write(status, NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置输入输出路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task10&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task10.class);</span><br><span class="line">        <span class="comment">// 设置 Map类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 key类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 Value类</span></span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">// 设置文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 获取hdfs路径</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> outpath.getFileSystem(conf);</span><br><span class="line">        <span class="comment">// 判断文件是否存在 如果存在就删除</span></span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p> <strong>编写 MapReduce 程序，实现以下功能：三级分类 category3_id 范围为[1,10],1 表示最低级别，10 表示最高 级别。本任务遍历 sku_info.csv 中数据，统计字段“三级 分类”级别为“10”最高级别的商品数量，将结果截图粘贴 至客户端桌面【M2-T3-SUBT3-提交结果 1.docx】中对应的任 务序号下。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task11</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个常量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义一个 Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个 map 用来接收</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串逗号分割得出数组</span></span><br><span class="line">            String[] line = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度</span></span><br><span class="line">            <span class="keyword">if</span> (line.length &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取 category3_id 字段</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">category</span> <span class="operator">=</span> Integer.parseInt(line[<span class="number">7</span>]);</span><br><span class="line">                <span class="keyword">if</span>(category == <span class="number">10</span>)&#123;</span><br><span class="line">                    context.write(status, one);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 IntWritable 存储count</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line">        <span class="comment">// 定义一个 reduce 用来接收</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 定义一个 count</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历 value 累加 count</span></span><br><span class="line">            <span class="keyword">for</span>(IntWritable value : values)&#123;</span><br><span class="line">                count += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(count);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置 输入输出累加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置Job类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task11&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置运行类</span></span><br><span class="line">        job.setJarByClass(task11.class);</span><br><span class="line">        <span class="comment">// 设置 Map类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce 类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置 输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第八套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第八套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop-hdfs命令基本操作</title>
      <link href="/2024/01/23/hadoop-hdfs%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/01/23/hadoop-hdfs%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop-hdfs命令基本操作"><a href="#hadoop-hdfs命令基本操作" class="headerlink" title="hadoop-hdfs命令基本操作"></a>hadoop-hdfs命令基本操作</h1><h1 id="python打印数据"><a href="#python打印数据" class="headerlink" title="python打印数据"></a>python打印数据</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.首先导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.读取数据 (../data/hotel_comment.csv这个是你数据文件的路径) (encoding=&quot;gbk&quot;这个是编码)</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/hotel_comment.csv&quot;</span>, encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.打印数据 print是打印的意思 df是你读取到的数据赋值给df</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># 4.打印有多少个字段</span></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><h1 id="常用的HDFS命令选项"><a href="#常用的HDFS命令选项" class="headerlink" title="常用的HDFS命令选项"></a>常用的HDFS命令选项</h1><h5 id="1-上传-put"><a href="#1-上传-put" class="headerlink" title="1.上传 -put"></a>1.上传 -put</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs -dfs -put /根目录文件路径 /上传到hdfs路径</span><br></pre></td></tr></table></figure><h5 id="2-下载-get"><a href="#2-下载-get" class="headerlink" title="2.下载 -get"></a>2.下载 -get</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /hdfs文件路径 /下载到根目录什么哪个链接</span><br></pre></td></tr></table></figure><h5 id="3-查看文件和目录-ls-（-x2F-是直接查全部或者后面可以指定文件路径）"><a href="#3-查看文件和目录-ls-（-x2F-是直接查全部或者后面可以指定文件路径）" class="headerlink" title="3.查看文件和目录  -ls （&#x2F;是直接查全部或者后面可以指定文件路径）"></a>3.查看文件和目录  -ls （&#x2F;是直接查全部或者后面可以指定文件路径）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><h5 id="4-新建-mkdir-表示如果当前路径下不存在该目录-文件夹-，则新建该目录-文件夹"><a href="#4-新建-mkdir-表示如果当前路径下不存在该目录-文件夹-，则新建该目录-文件夹" class="headerlink" title="4.新建 -mkdir 表示如果当前路径下不存在该目录(文件夹)，则新建该目录(文件夹)"></a>4.新建 -mkdir 表示如果当前路径下不存在该目录(文件夹)，则新建该目录(文件夹)</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /文件名称或者目录名称</span><br></pre></td></tr></table></figure><h5 id="5-修改权限-chmod-权限-777"><a href="#5-修改权限-chmod-权限-777" class="headerlink" title="5.修改权限 -chmod 权限 777"></a>5.修改权限 -chmod 权限 777</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chmod 777 /文件或者目录路径</span><br></pre></td></tr></table></figure><h5 id="6-查看数据内容-cat-查看内容"><a href="#6-查看数据内容-cat-查看内容" class="headerlink" title="6.查看数据内容 -cat:查看内容"></a>6.查看数据内容 -cat:查看内容</h5><p>​| head -n 10 (打印十条数据)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /文件数据路径 | head -n 10</span><br></pre></td></tr></table></figure><h5 id="7-删除-rm-r-（多一个r是强制删除）"><a href="#7-删除-rm-r-（多一个r是强制删除）" class="headerlink" title="7.删除 -rm -r （多一个r是强制删除）"></a>7.删除 -rm -r （多一个r是强制删除）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm -r /文件或者目录或者文件数据</span><br></pre></td></tr></table></figure><h5 id="8-查看计算文本或目录大小-（要是不可以在-du后面加一个-h-）"><a href="#8-查看计算文本或目录大小-（要是不可以在-du后面加一个-h-）" class="headerlink" title="8.查看计算文本或目录大小 （要是不可以在**-du后面加一个-h**）"></a>8.查看计算文本或目录大小 （要是不可以在**-du<strong>后面加一个</strong>-h**）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -du /文件或者目录或者文件数据</span><br></pre></td></tr></table></figure><h5 id="9-移动文件或者目录"><a href="#9-移动文件或者目录" class="headerlink" title="9.移动文件或者目录"></a>9.移动文件或者目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdsf dfs -mv /想要移动的文件或者目录 /移动到哪个目录或者文件</span><br></pre></td></tr></table></figure><h5 id="10-以文本格式显示文件的内容"><a href="#10-以文本格式显示文件的内容" class="headerlink" title="10.以文本格式显示文件的内容"></a>10.以文本格式显示文件的内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -text /文件数据路径</span><br></pre></td></tr></table></figure><h5 id="11-显示文件末尾内容"><a href="#11-显示文件末尾内容" class="headerlink" title="11.显示文件末尾内容"></a>11.显示文件末尾内容</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /文件数据路径</span><br></pre></td></tr></table></figure><h5 id="12-统计文件和目录的数量"><a href="#12-统计文件和目录的数量" class="headerlink" title="12.统计文件和目录的数量"></a>12.统计文件和目录的数量</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -count /文件或者目录也可以直接/查看全部</span><br></pre></td></tr></table></figure><h5 id="13-设置文本的副本数"><a href="#13-设置文本的副本数" class="headerlink" title="13.设置文本的副本数"></a>13.设置文本的副本数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -setrep 文本数量 /文件或者目录或者文本数据路径</span><br></pre></td></tr></table></figure><h5 id="14-在HDFS上创建一个空文件"><a href="#14-在HDFS上创建一个空文件" class="headerlink" title="14.在HDFS上创建一个空文件"></a>14.在HDFS上创建一个空文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -touchz /文件名称</span><br></pre></td></tr></table></figure><h5 id="15-更改文件或目录的权限"><a href="#15-更改文件或目录的权限" class="headerlink" title="15.更改文件或目录的权限"></a>15.更改文件或目录的权限</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chown 所有者名称 /被修改的文件或目录名称</span><br></pre></td></tr></table></figure><h5 id="16-更改文件或目录的所属组"><a href="#16-更改文件或目录的所属组" class="headerlink" title="16.更改文件或目录的所属组"></a>16.更改文件或目录的所属组</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chown 所有者名称 /被修改的文件或目录名称</span><br></pre></td></tr></table></figure><h1 id="HDFS常用命令用法"><a href="#HDFS常用命令用法" class="headerlink" title="HDFS常用命令用法"></a>HDFS常用命令用法</h1><h3 id="1-列出指定路径下的文件和目录。"><a href="#1-列出指定路径下的文件和目录。" class="headerlink" title="1. 列出指定路径下的文件和目录。"></a>1. 列出指定路径下的文件和目录。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /user/hadoop</span><br></pre></td></tr></table></figure><p>这将列出 <code>/user/hadoop</code> 目录下的文件和目录。</p><h3 id="2-将本地文件或目录上传到-HDFS。"><a href="#2-将本地文件或目录上传到-HDFS。" class="headerlink" title="2. 将本地文件或目录上传到 HDFS。"></a>2. 将本地文件或目录上传到 HDFS。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put local_file.txt /user/hadoop/</span><br></pre></td></tr></table></figure><p>这将把本地文件 <code>local_file.txt</code> 上传到 <code>/user/hadoop/</code> 目录中。</p><h3 id="3-创建一个新的目录。"><a href="#3-创建一个新的目录。" class="headerlink" title="3. 创建一个新的目录。"></a>3. 创建一个新的目录。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /user/hadoop/new_directory</span><br></pre></td></tr></table></figure><p>这将把本地文件 <code>local_file.txt</code> 上传到 <code>/user/hadoop/</code> 目录中。</p><h3 id="4-从-HDFS-下载文件或目录到本地文件系统。"><a href="#4-从-HDFS-下载文件或目录到本地文件系统。" class="headerlink" title="4. 从 HDFS 下载文件或目录到本地文件系统。"></a>4. 从 HDFS 下载文件或目录到本地文件系统。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /user/hadoop/file.txt  local_directory/</span><br></pre></td></tr></table></figure><p>这将从 HDFS 的 <code>/user/hadoop/file.txt</code> 下载文件，并将其保存到本地文件系统的 <code>local_directory/</code> 目录中。</p><h3 id="5-删除-HDFS-中的文件或目录。"><a href="#5-删除-HDFS-中的文件或目录。" class="headerlink" title="5. 删除 HDFS 中的文件或目录。"></a>5. 删除 HDFS 中的文件或目录。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将删除 HDFS 中的 <code>/user/hadoop/file.txt</code> 文件。</p><h3 id="6-移动文件或目录。"><a href="#6-移动文件或目录。" class="headerlink" title="6. 移动文件或目录。"></a>6. 移动文件或目录。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将把 <code>/user/hadoop/file.txt</code> 移动到 <code>/user/hadoop/new_location/</code>。</p><h3 id="7-显示文件的内容。"><a href="#7-显示文件的内容。" class="headerlink" title="7. 显示文件的内容。"></a>7. 显示文件的内容。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将显示 HDFS 中 <code>/user/hadoop/file.txt</code> 文件的内容。</p><h3 id="8-更改文件或目录的权限。"><a href="#8-更改文件或目录的权限。" class="headerlink" title="8. 更改文件或目录的权限。"></a>8. 更改文件或目录的权限。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chmod 755 /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将把 <code>/user/hadoop/file.txt</code> 的权限更改为 755。</p><h3 id="9-计算文件或目录的大小。"><a href="#9-计算文件或目录的大小。" class="headerlink" title="9. 计算文件或目录的大小。"></a>9. 计算文件或目录的大小。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -du /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>将计算 <code>/user/hadoop/file.txt</code> 文件的大小。</p><h3 id="10-显示文件的末尾内容。"><a href="#10-显示文件的末尾内容。" class="headerlink" title="10. 显示文件的末尾内容。"></a>10. 显示文件的末尾内容。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -tail /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将显示 HDFS 中 <code>/user/hadoop/file.txt</code> 文件的末尾内容。</p><h3 id="11-以文本格式显示文件的内容。"><a href="#11-以文本格式显示文件的内容。" class="headerlink" title="11. 以文本格式显示文件的内容。"></a>11. 以文本格式显示文件的内容。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -text /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将以文本格式显示 HDFS 中 <code>/user/hadoop/file.txt</code> 文件的内容。</p><h3 id="12-统计文件和目录的数量。"><a href="#12-统计文件和目录的数量。" class="headerlink" title="12. 统计文件和目录的数量。"></a>12. 统计文件和目录的数量。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -count /user/hadoop/</span><br></pre></td></tr></table></figure><p>这将统计 <code>/user/hadoop/</code> 目录下的文件和目录的数量。</p><h3 id="13-设置文件的副本数。"><a href="#13-设置文件的副本数。" class="headerlink" title="13. 设置文件的副本数。"></a>13. 设置文件的副本数。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -setrep -w 3 /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将把 <code>/user/hadoop/file.txt</code> 文件的副本数设置为 3。</p><h3 id="14-在-HDFS-上创建一个空文件。"><a href="#14-在-HDFS-上创建一个空文件。" class="headerlink" title="14. 在 HDFS 上创建一个空文件。"></a>14. 在 HDFS 上创建一个空文件。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -touchz /user/hadoop/empty_file.txt</span><br></pre></td></tr></table></figure><p>这将在 HDFS 的 <code>/user/hadoop/</code> 目录下创建一个名为 <code>empty_file.txt</code> 的空文件。</p><h3 id="15-更改文件或目录的所有者。"><a href="#15-更改文件或目录的所有者。" class="headerlink" title="15. 更改文件或目录的所有者。"></a>15. 更改文件或目录的所有者。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chown hadoop_user /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将把 <code>/user/hadoop/file.txt</code> 的所有者更改为 <code>hadoop_user</code>。</p><h3 id="16-更改文件或目录的所属组。"><a href="#16-更改文件或目录的所属组。" class="headerlink" title="16. 更改文件或目录的所属组。"></a>16. 更改文件或目录的所属组。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chgrp hadoop_group /user/hadoop/file.txt</span><br></pre></td></tr></table></figure><p>这将把 <code>/user/hadoop/file.txt</code> 的所属组更改为 <code>hadoop_group</code>。</p>]]></content>
      
      
      <categories>
          
          <category> hadoop-hdfs命令基本操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop-hdfs命令基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第七套题</title>
      <link href="/2024/01/23/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%B8%83%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/23/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%B8%83%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第七套题"><a href="#第七套题" class="headerlink" title="第七套题:"></a>第七套题:</h1><h1 id="一、Python部分"><a href="#一、Python部分" class="headerlink" title="一、Python部分"></a>一、Python部分</h1><h4 id="1、数据处理"><a href="#1、数据处理" class="headerlink" title="1、数据处理"></a>1、数据处理</h4><p><strong>（1）查看 train.csv 中数据总数、标准差、均值、最 小值、四分之一分位数、二分之一分位数、四分之三分位 数和最大值； 将上述代码截图复制粘贴至客户端桌面 【M2-T1-SUBT2-提交结果 1.docx】中对应的任务序号下。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&#x27;打印导入的数据:&#x27;, data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择数值型的列</span></span><br><span class="line">numeric_data = data.select_dtypes(include=[<span class="string">&#x27;int64&#x27;</span>, <span class="string">&#x27;float64&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 总数</span></span><br><span class="line">data_1 = <span class="built_in">len</span>(numeric_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;总数:&#x27;</span>,data_1)</span><br><span class="line"><span class="comment"># 标准差</span></span><br><span class="line">data_2 = numeric_data.std()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;标准差:&#x27;</span>,data_2)</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">data_3 = numeric_data.mean()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值&#x27;</span>, data_3)</span><br><span class="line"><span class="comment"># 最小值</span></span><br><span class="line">data_4 = numeric_data.<span class="built_in">min</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最小值&#x27;</span>, data_4)</span><br><span class="line"><span class="comment"># 计算四分之一位数</span></span><br><span class="line">data_5 = numeric_data.quantile(<span class="number">0.25</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算四分之一位数&#x27;</span>, data_5)</span><br><span class="line"><span class="comment"># 计算二分之一位数(中位数)</span></span><br><span class="line">data_6 = numeric_data.quantile(<span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算二分之一位数(中位数)&#x27;</span>, data_6)</span><br><span class="line"><span class="comment"># 计算四分之三分位数</span></span><br><span class="line">data_7 = numeric_data.quantile(<span class="number">0.75</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;计算二分之一位数(中位数)&#x27;</span>, data_7)</span><br><span class="line"><span class="comment"># 计算最大值</span></span><br><span class="line">data_8 = numeric_data.<span class="built_in">max</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最大值&#x27;</span>, data_8)</span><br></pre></td></tr></table></figure><p><strong>（2）缺失值处理：</strong></p><p> ①对于 job 列数据，采用‘admin.’填充缺失值；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断isnull是否有缺失值</span></span><br><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line">data_1 = data[<span class="string">&#x27;job&#x27;</span>].isnull()</span><br><span class="line"><span class="built_in">print</span>(data_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充缺失值</span></span><br><span class="line">data[<span class="string">&#x27;job&#x27;</span>].fillna(<span class="string">&#x27;admin.&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p> ②对于 marital 列数据，如果年龄（age）小于 30 采 用’single’，如果大于 50 采用’divorced’代替，其他采用 ‘marital’代替；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line">missing_values = df[<span class="string">&#x27;marital&#x27;</span>].isnull()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据条件填充缺失值</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;age&#x27;</span>] &lt; <span class="number">30</span>, <span class="string">&#x27;marital&#x27;</span>] = <span class="string">&#x27;single&#x27;</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;age&#x27;</span>] &gt; <span class="number">50</span>, <span class="string">&#x27;marital&#x27;</span>] = <span class="string">&#x27;divorced&#x27;</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;age&#x27;</span>].isnull(), <span class="string">&#x27;marital&#x27;</span>] = <span class="string">&#x27;marital&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;marital&#x27;</span>]].head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.to_csv(&#x27;data_1.csv&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ③将教育类型 basic.9y，basic.6y，basic.4y unknown 均变为 Basic； </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查教育类型的唯一值</span></span><br><span class="line">unique_values = df[<span class="string">&#x27;education&#x27;</span>].unique()</span><br><span class="line"><span class="built_in">print</span>(unique_values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用replace()函数替换值。在pandas中，你可以使用replace()函数来替换列中的特定值。将需要替换的值作为参数传递给replace()函数，并指定替换后的新值。</span></span><br><span class="line"><span class="comment"># 替换教育类型的值</span></span><br><span class="line">df[<span class="string">&#x27;education&#x27;</span>].replace([<span class="string">&#x27;basic.9y&#x27;</span>, <span class="string">&#x27;basic.6y&#x27;</span>, <span class="string">&#x27;basic.4y&#x27;</span>], <span class="string">&#x27;Basic&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印替换后的数据</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;education&#x27;</span>].head(<span class="number">10</span>))</span><br><span class="line">df.to_csv(<span class="string">&#x27;data_2.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>④对于 housing 列数据，如果信用卡是有违约，即 default 为 yes，则用 yes 代替，否则用 no 代替；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 train.csv 文件</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 default 列的值替换 housing 列的数据</span></span><br><span class="line">data[<span class="string">&#x27;housing&#x27;</span>] = data[<span class="string">&#x27;housing&#x27;</span>].where(data[<span class="string">&#x27;default&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>).where(data[<span class="string">&#x27;default&#x27;</span>] == <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存修改后的数据到 train_c2.csv 文件</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;train_c2.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> ⑤对于 loan 列数据，如果有房贷，即 housing 为 yes， 则用 yes 代替，否则用 no 代替。 所有缺失值处理完后，存入 train_c1.csv 中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 train.csv 文件</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 housing 列的值替换 loan 列的数据</span></span><br><span class="line">data[<span class="string">&#x27;loan&#x27;</span>] = data[<span class="string">&#x27;loan&#x27;</span>].where(data[<span class="string">&#x27;housing&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>).where(data[<span class="string">&#x27;housing&#x27;</span>] == <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值</span></span><br><span class="line">data.fillna(&#123;<span class="string">&#x27;loan&#x27;</span>: <span class="string">&#x27;no&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存处理后的数据到 train_c1.csv 文件</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;train_c1.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>将上述①-⑤任务的代码截图及结果截图复制粘贴至客 户端桌面【M2-T1-SUBT2-提交结果2.docx】中对应的任务序 号下。</strong> </p><p>（3）查看 train.csv 中的数字特征，对数字特征进行 描述性统计，并采用四分位数法进行数据清洗以减少噪声 数据的影响，然后存入 train_c2.csv 中； </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 train.csv 文件</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数字特征的描述性统计</span></span><br><span class="line">numeric_features = data.select_dtypes(include=[<span class="string">&#x27;int64&#x27;</span>, <span class="string">&#x27;float64&#x27;</span>])</span><br><span class="line">numeric_stats = numeric_features.describe()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用四分位数法进行数据清洗</span></span><br><span class="line">Q1 = numeric_features.quantile(<span class="number">0.25</span>)</span><br><span class="line">Q3 = numeric_features.quantile(<span class="number">0.75</span>)</span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line">cleaned_data = numeric_features[(numeric_features &gt;= lower_bound) &amp; (numeric_features &lt;= upper_bound)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将清洗后的数据保存到 train_c2.csv 文件中</span></span><br><span class="line">cleaned_data.to_csv(<span class="string">&#x27;train_c2.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data) - <span class="built_in">len</span>(cleaned_data))</span><br></pre></td></tr></table></figure><p>（4）对 train.csv 中的非数字特征进行 LabelEncoder 编码并存入 train_c3.csv 中。 将（3）-（4）小题的代码截图复制粘贴至客户端桌面 【M2-T1-SUBT2-提交结果3.docx】中对应的任务序号下。 </p><h4 id="2、数据标注"><a href="#2、数据标注" class="headerlink" title="2、数据标注"></a>2、数据标注</h4><p>对上述train_c3.csv数据进行标注，判断客户是否会购 买银行的产品，具体的标注规则如下：</p><p> （1）如果“subscribe”列数据为1，则数据标注为‘yes’；</p><p> （2）如果“subscribe”列数据为0，则数据标注为‘no’； 标注好的数据存储为列‘subscribe’并和train.csv数 据合并存入result.csv。 将代码截图复制粘贴至客户端桌面【M2-T2-SUBT1-提交 结果1.docx】中对应的任务序号下。</p><table><thead><tr><th>map和replace用法</th><th>介绍</th></tr></thead><tbody><tr><td>map</td><td><code>map</code>方法适用于Series对象，可以通过提供一个字典或函数来将Series中的值映射为其他值。例如，你可以使用<code>map</code>方法将Series中的1映射为’yes’，将0映射为’no’</td></tr><tr><td>replace</td><td><code>replace</code>方法适用于Series或DataFrame对象，可以通过提供一个字典或值的替换规则来替换数据。例如，你可以使用<code>replace</code>方法将Series或DataFrame中的1替换为’yes’，将0替换为’no’</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 train.csv 文件</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;./文本/train.csv&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(train_data.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据 subscribe 列的值标注数据</span></span><br><span class="line">train_data[<span class="string">&#x27;subscribe&#x27;</span>] = train_data[<span class="string">&#x27;subscribe&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="number">1</span>: <span class="string">&#x27;yes&#x27;</span>, <span class="number">0</span>: <span class="string">&#x27;no&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并数据</span></span><br><span class="line">result_data = pd.concat([train_data[<span class="string">&#x27;subscribe&#x27;</span>], train_data], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存结果到 result.csv 文件</span></span><br><span class="line">result_data.to_csv(<span class="string">&#x27;result.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="二：数据统计"><a href="#二：数据统计" class="headerlink" title="二：数据统计"></a>二：数据统计</h1><h2 id="hdfs操作步骤"><a href="#hdfs操作步骤" class="headerlink" title="hdfs操作步骤"></a>hdfs操作步骤</h2><p>1.子任务一：HDFS 文件上传下载 本任务需要使用 Hadoop，HDFS 命令，已安装 Hadoop 及 需要配置前置环境，具体要求如下：</p><p>（1）在 Master 中的&#x2F;root&#x2F;目录下新建一个文件 夹:result，将创建文件夹命令与结果截图粘贴至客户端桌 面【M2-T3-SUBT1-提交结果 1.docx】中对应的任务序号下； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /root/result</span><br></pre></td></tr></table></figure><p>（2）使用 HDFS 命令，将 Master 下：&#x2F;root 目录下新建 的文件夹：result 上传到 HDFS 指定目录下：&#x2F;根目录下；并 且使用 HDFS 命令查看目录；将 HDFS 上传，查看命令截图粘 贴至客户端桌面【M2-T3-SUBT1-提交结果 2.docx】中对应的 任务序号下；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /root/result /</span><br></pre></td></tr></table></figure><p> （3）使用 HDFS 命令，将 HDFS 目录下的&#x2F;result 文件夹 下载到 Master 指定目录下:根目录下(<strong>他这里没有提供</strong>,<strong>所以我就将他放到root下</strong>)；将下载文件夹命令与 结果截图粘贴至客户端桌面【M2-T3-SUBT1-提交结果 3.docx】 中对应的任务序号下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /result /root/</span><br></pre></td></tr></table></figure><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p> <strong>编写 MapReduce 程序，实现以下功能：清除日志中字 段长度比 11 小的日志记录，输出文件到 HDFS；在控制台按 顺序打印输出前 20 条数据，将结果截图粘贴至客户端桌面 【M2-T3-SUBT2-提交结果 1.docx】中对应的任务序号下。</strong> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task08</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个taskMapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span>  <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个map</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 以逗号分割得出数组</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度</span></span><br><span class="line">            <span class="keyword">if</span>(fields.length &gt;= <span class="number">11</span>)&#123;</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(line), status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个 Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 reduce 接收</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Reducer&lt;Text, Text, Text, Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="keyword">for</span> (Text value : values)&#123;</span><br><span class="line">                context.write(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置输入输出路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task08&quot;</span>);</span><br><span class="line">        <span class="comment">//  设置运行类</span></span><br><span class="line">        job.setJarByClass(task08.class);</span><br><span class="line">        <span class="comment">// 设置map类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p><strong>编写 MapReduce 程序，实现以下功能：对于 gender 这 一字段统计电商消费人数男女数量，在控制台输出男女各多 少人，将结果截图粘贴至客户端桌面【M2-T3-SUBT3-提交结 果 1.docx】中对应的任务序号下。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task09</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个taskMapper 继承Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text,Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个常量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义一个 Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 定义一个map接收</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 以逗号分割得出数组</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度</span></span><br><span class="line">            <span class="keyword">if</span>(fields.length &lt;= <span class="number">13</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取gender字段</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">genders</span> <span class="operator">=</span> fields[<span class="number">10</span>];</span><br><span class="line">                <span class="comment">// 设置status为genders</span></span><br><span class="line">                status.set(genders);</span><br><span class="line">                <span class="comment">// 输出键对值</span></span><br><span class="line">                context.write(status, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable,Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个Treemap</span></span><br><span class="line">        <span class="keyword">private</span> TreeMap&lt;Integer, String&gt; result = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 定义一个 reduce 继承</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 定义一个sum为0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历value 累加 sum</span></span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values)&#123;</span><br><span class="line">                sum += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 result 为sum</span></span><br><span class="line">            result.put(sum, key.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个cleanup</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 在定义一个 Treemap</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : result.descendingMap().entrySet())&#123;</span><br><span class="line">                <span class="comment">// 获取key计数值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="comment">// 获取value字符串值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fields</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="comment">// 输出</span></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(fields), <span class="keyword">new</span> <span class="title class_">IntWritable</span>(count));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置输入输出路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 设置配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;task09&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task09.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce 类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置 输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置 输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第七套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第七套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第六套题</title>
      <link href="/2024/01/22/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%85%AD%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/22/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%85%AD%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第六套题"><a href="#第六套题" class="headerlink" title="第六套题:"></a>第六套题:</h1><h1 id="一、Python部分"><a href="#一、Python部分" class="headerlink" title="一、Python部分"></a>一、Python部分</h1><h2 id="1、数据处理"><a href="#1、数据处理" class="headerlink" title="1、数据处理"></a>1、数据处理</h2><p>1.根据 distribution.csv 文件统计单条数据缺失字段计 数的最大值，将结果输出到控制台，输出格式如下： &#x3D;&#x3D;&#x3D;单条数据缺失字段计数的最大值为***&#x3D;&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;../data/distribution.csv&#x27;</span>)</span><br><span class="line">missing_counts = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">max_missing_count = missing_counts.<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===单条数据缺失字段计数的最大值为&#123;&#125;===&quot;</span>.<span class="built_in">format</span>(max_missing_count))</span><br></pre></td></tr></table></figure><h2 id="2、数据标注"><a href="#2、数据标注" class="headerlink" title="2、数据标注"></a>2、数据标注</h2><p> 在末尾新增一列数据为“当日是否解冻”，若当日 最高温大于 0，并且风力小于等于 2 级，打标签为‘是’；否 则打标签为‘否’。标记完成后保存到当前目录，文件命名 为“annotation.xlsx”,并将数据截图粘贴到答题报告对应位置。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;../data/长春天气信息.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将hightest_tem转换成浮点数</span></span><br><span class="line">df[<span class="string">&#x27;hightest_tem&#x27;</span>] = df[<span class="string">&#x27;hightest_tem&#x27;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># 将wind_level部分数据转换成成整数类型</span></span><br><span class="line">df[<span class="string">&#x27;wind_level&#x27;</span>] = df[<span class="string">&#x27;wind_level&#x27;</span>].<span class="built_in">str</span>.extract(<span class="string">&#x27;(\d+)&#x27;</span>, expand=<span class="literal">False</span>).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line">df.loc[(df[<span class="string">&#x27;hightest_tem&#x27;</span>] &gt; <span class="number">0</span>) &amp; (df[<span class="string">&#x27;wind_level&#x27;</span>] &lt;= <span class="number">2</span>), <span class="string">&#x27;当日是否解冻&#x27;</span>] = <span class="string">&#x27;是&#x27;</span></span><br><span class="line">df.loc[(df[<span class="string">&#x27;hightest_tem&#x27;</span>] &lt;= <span class="number">0</span>) | (df[<span class="string">&#x27;wind_level&#x27;</span>] &gt; <span class="number">2</span>), <span class="string">&#x27;当日是否解冻&#x27;</span>] = <span class="string">&#x27;否&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h1 id="二、数据统计"><a href="#二、数据统计" class="headerlink" title="二、数据统计"></a>二、数据统计</h1><h2 id="子任务二：HDFS-操作"><a href="#子任务二：HDFS-操作" class="headerlink" title="子任务二：HDFS 操作"></a>子任务二：HDFS 操作</h2><p>本任务需要使用 Hadoop，HDFS 命令，已安装 Hadoop 及 需要配置前置环境，具体要求如下： </p><p>（1）在 master 节点的 hadoop 环境中，使用 HDFS 命令 列出 HDFS 的文件和目录，将完整命令及结果截图粘贴到对 应答题报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>（2）使用 HDFS 命令创建一个名为 bigdata 目录，将完 整命令及结果截图粘贴到对应答题报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /bigdata</span><br></pre></td></tr></table></figure><p>（3）使用 HDFS 命令将&#x2F;opt&#x2F;eurasia_mainland.csv 文 件上传到 HDFS 文件系统的&#x2F;bigdata 目录下，将完整命令及 结果截图粘贴到对应答题报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /opt/eurasia_mainland.csv /bigdata</span><br></pre></td></tr></table></figure><p>（4）使用 HDFS 命令将&#x2F;bigdata&#x2F;eurasia_mainland.csv 12 12 文件下载到&#x2F;root 目录下，将完整命令及结果截图粘贴到对 应答题报告中；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get /bigdata/eurasia_mainland.csv /root/</span><br></pre></td></tr></table></figure><p>（5）使用 HDFS 令查看&#x2F;bigdata&#x2F;eurasia_mainland.csv 文件的数据内容，将完整命令及结果截图粘贴到对应答题报 告中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /bigdata/eurasia_mainland.csv</span><br></pre></td></tr></table></figure><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p>编写 MapReduce 程序，实现以下功能：清除年份、国家 区 域 为 空 的 数 据 ， 将 清 理 后 的 数 据 保 存 到 HDFS 中 &#x2F;clean_data 目录下，若目录不存在，请自行创建，使用命 令查看该文件的大小，将完整命令及结果截图粘贴到对应答 题报告中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个taskMapper 继承Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个Text key</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// value</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            String[] line = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> line[<span class="number">0</span>].trim();</span><br><span class="line">            <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> line[<span class="number">1</span>].trim();</span><br><span class="line">            <span class="keyword">if</span> (!year.isEmpty() &amp;&amp; !country.isEmpty()) &#123;</span><br><span class="line">                one.set(year);</span><br><span class="line">                status.set(value);</span><br><span class="line">                context.write(one, status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个 Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个reduce 用来接收</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">                context.write(key, value); <span class="comment">// 直接输出键值对，无需进行处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task07&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task07.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 输入路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 获取hdfs路径</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> outpath.getFileSystem(conf);</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ?  <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p>编写 MapReduce 程序，实现以下功能：统计每个国家不 同年份基于灾害类型为气候灾害受损经济最高的国家，并在 控制台输出打印出气候灾害受损经济最高的 10 个国家</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.scripts.JO;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task06</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text,Text, DoubleWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 重写map</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, DoubleWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 过滤第一行表头</span></span><br><span class="line">            <span class="keyword">if</span> (key.toString().equals(<span class="string">&quot;0&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 将value转换成字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 逗号分割</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取国家</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> fields[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 获取总经济损失</span></span><br><span class="line">            <span class="type">Double</span> <span class="variable">economic</span> <span class="operator">=</span> Double.parseDouble(fields[<span class="number">7</span>]);</span><br><span class="line">            <span class="comment">// 输出</span></span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(country), <span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(economic));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 Reducer 处理Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,DoubleWritable,Text,DoubleWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 Treemap</span></span><br><span class="line">        <span class="keyword">private</span> TreeMap&lt;Double, String&gt; result = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 重写reduce</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;DoubleWritable&gt; values, Reducer&lt;Text, DoubleWritable, Text, DoubleWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 获取国家</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> key.toString();</span><br><span class="line">            <span class="comment">// 获取受损经济最高的</span></span><br><span class="line">            <span class="type">Double</span> <span class="variable">economicMax</span> <span class="operator">=</span> Double.MIN_VALUE;</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">for</span> (DoubleWritable value : values)&#123;</span><br><span class="line">                economicMax = Math.max(economicMax, value.get());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 result 为 economicMax和country</span></span><br><span class="line">            result.put(economicMax,country);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义一个 cleanup</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Reducer&lt;Text, DoubleWritable, Text, DoubleWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 定义一个 count</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历得出最高</span></span><br><span class="line">            <span class="keyword">for</span> (Double temp : result.descendingKeySet())&#123;</span><br><span class="line">                <span class="comment">// if判断</span></span><br><span class="line">                <span class="keyword">if</span> (count &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">                    <span class="comment">// 获取国家</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> result.get(temp);</span><br><span class="line">                    <span class="comment">// 输出</span></span><br><span class="line">                    context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(country), <span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(temp));</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置配置对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;task06&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reducer类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置key类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置Value类</span></span><br><span class="line">        job.setOutputValueClass(DoubleWritable.class);</span><br><span class="line">        <span class="comment">// 设置 输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置 输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第六套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第六套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第五套题</title>
      <link href="/2024/01/21/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%BA%94%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/21/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%BA%94%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第五套题"><a href="#第五套题" class="headerlink" title="第五套题:"></a>第五套题:</h1><h1 id="一、Python部分"><a href="#一、Python部分" class="headerlink" title="一、Python部分"></a>一、Python部分</h1><h3 id="1-数据处理"><a href="#1-数据处理" class="headerlink" title="1.数据处理"></a>1.数据处理</h3><p>1.读取已经爬取到的 distribution.csv 数据文件，根据 表头字段名统计每一列缺失值个数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/distribution.csv&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取已经爬取到的 distribution.csv 数据文件，根据 表头字段名统计每一列缺失值个数</span></span><br><span class="line">df = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;===统计每一列缺失值个数为\n<span class="subst">&#123;df&#125;</span>===&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-数据标注"><a href="#2-数据标注" class="headerlink" title="2.数据标注"></a>2.数据标注</h3><p><strong>使用 Pandas 读取数据后，将数据按日期列升序排列， 在末尾新增一列数据为“是否适合出行游玩”，若当日为周 六周日，气温大于等于 18 度小于等于 30 度，并且不下雨， 打标签为‘是’；否则打标签为‘否’。标记完成后将标记数 据集保存到项目下的“taged_data.xlsx”的文件中</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;../data/鞍山.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将日期列转换成日期类型</span></span><br><span class="line">df[<span class="string">&#x27;日期&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;date&#x27;</span>], errors=<span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"><span class="comment"># 按照日期列升序排列</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;日期&#x27;</span>)</span><br><span class="line"><span class="comment"># 判断</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>(<span class="params">row</span>):</span><br><span class="line">    <span class="comment"># 定义日期</span></span><br><span class="line">    day = &#123;<span class="string">&#x27;星期一&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;星期二&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;星期三&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;星期四&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;星期五&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;星期六&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;星期天&#x27;</span>: <span class="number">7</span>&#125;</span><br><span class="line">    <span class="comment"># 将日期转换成数字</span></span><br><span class="line">    wekkday = day[row[<span class="string">&#x27;weekday&#x27;</span>]]</span><br><span class="line">    <span class="comment"># 获取最高气温转换成浮点数</span></span><br><span class="line">    hightest_tem = <span class="built_in">float</span>(row[<span class="string">&#x27;hightest_tem&#x27;</span>])</span><br><span class="line">    <span class="comment"># 获取最低气温转换成浮点数</span></span><br><span class="line">    lowest_tem = <span class="built_in">float</span>(row[<span class="string">&#x27;lowest_tem&#x27;</span>])</span><br><span class="line">    <span class="comment"># 获取天气</span></span><br><span class="line">    weather =row[<span class="string">&#x27;weather&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始判断</span></span><br><span class="line">    <span class="keyword">if</span> wekkday == <span class="number">6</span> <span class="keyword">and</span> <span class="number">18</span> &lt;= hightest_tem &lt;= <span class="number">30</span> <span class="keyword">and</span>  <span class="number">18</span> &lt;= lowest_tem &lt;= <span class="number">30</span> <span class="keyword">and</span> weather != <span class="string">&#x27;小雨&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;是&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;否&#x27;</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;适合游玩&#x27;</span>] = df.apply(clean,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;taged_data.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h1 id="二、数据统计："><a href="#二、数据统计：" class="headerlink" title="二、数据统计："></a>二、数据统计：</h1><h2 id="hdfs操作"><a href="#hdfs操作" class="headerlink" title="hdfs操作"></a>hdfs操作</h2><p>本任务需要使用 Hadoop，HDFS 命令，已安装 Hadoop 及 需要配置前置环境，具体要求如下： </p><p>1.在 master 节点 HDFS 根目录下创建 student 目录， 将完整命令及结果截图粘贴到对应答题报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /student</span><br></pre></td></tr></table></figure><p>2.使用命令将&#x2F;root&#x2F;clean_month.csv 文件上传到 HDFS 文件系统的&#x2F;student 目录下，将完整命令及结果截图 粘贴到对应答题报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put /root/clean_month.csv /student</span><br></pre></td></tr></table></figure><p>3.使用命令查看 HDFS 中&#x2F;student&#x2F;clean_month.csv 文件的后 5 条数据，将完整命令及结果截图粘贴到对应答题 报告中； </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /student/clean_month.csv | tail -n 5</span><br></pre></td></tr></table></figure><p>4.使用命令查看 HDFS 中&#x2F;student 目录下每个文件所 占磁盘空间，人性化显示文件大小，将完整命令及结果截图 粘贴到对应答题报告中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -du -h /student</span><br></pre></td></tr></table></figure><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># slave1</span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"></span><br><span class="line"># slave2</span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p><strong>编写 MapReduce 程序，实现以下功能：清除月份为空 的数据，将清理后的数据输出到 HDFS 中&#x2F;clean 目录下，若 目录不存在，请自行创建，使用命令查看该文件的大小，将 完整命令及结果截图粘贴到对应答题报告中。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.January;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.yarn.webapp.hamlet2.Hamlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task04</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个taskMapper 继承Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个Text key</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// value</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串，并且以逗号分割</span></span><br><span class="line">            String[] line = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 清除两端空格</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fields</span> <span class="operator">=</span> line[<span class="number">1</span>].trim();</span><br><span class="line">            <span class="comment">// 判断月份是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (!fields.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 或月份</span></span><br><span class="line">                one.set(fields);</span><br><span class="line">                <span class="comment">// 获取整行</span></span><br><span class="line">                status.set(value);</span><br><span class="line">                context.write(one, status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个 Reduce 继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个reduce 用来接收</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">                context.write(key, value); <span class="comment">// 直接输出键值对，无需进行处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 设置配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task04&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(task04.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 输入路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 获取hdfs路径</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> outpath.getFileSystem(conf);</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (fileSystem.exists(outpath))&#123;</span><br><span class="line">            fileSystem.delete(outpath, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ?  <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p>编写 MapReduce 程序，实现以下功能：统计每个城市最 高温度，并在控制台输出温度最高的 5 个城市以及最高的温 度，将输出结果截图粘贴到对应答题报告中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.February;</span><br><span class="line"><span class="comment">// 导入需要的类</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task03</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个 Mapper 类来处理输入的数据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CityTempMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, DoubleWritable&gt; &#123;</span><br><span class="line">            <span class="comment">// 重写 map 方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">                <span class="keyword">if</span>(key.toString().equals(<span class="string">&quot;0&quot;</span>)) <span class="keyword">return</span>;</span><br><span class="line">                <span class="comment">// 将输入的数据转换成 String 类型</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">                <span class="comment">// 将数据按逗号分隔</span></span><br><span class="line">                String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                <span class="comment">// 获取城市名称和最高温度</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> fields[<span class="number">0</span>];</span><br><span class="line">                <span class="type">double</span> <span class="variable">extremeHighTemp</span> <span class="operator">=</span> Double.parseDouble(fields[<span class="number">4</span>]);</span><br><span class="line">                <span class="comment">// 将城市名称和最高温度作为键值对输出</span></span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(city), <span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(extremeHighTemp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个 Reducer 类来处理 Mapper 的输出</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CityTempReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, DoubleWritable, Text, DoubleWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义一个 TreeMap 来存储城市和最高温度，按温度降序排序</span></span><br><span class="line">            <span class="keyword">private</span> TreeMap&lt;Double, String&gt; cityTempMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写 reduce 方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;DoubleWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">                <span class="comment">// 获取城市名称</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> key.toString();</span><br><span class="line">                <span class="comment">// 遍历温度值，找出最高的一个</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">maxTemp</span> <span class="operator">=</span> Double.MIN_VALUE;</span><br><span class="line">                <span class="keyword">for</span> (DoubleWritable value : values) &#123;</span><br><span class="line">                    maxTemp = Math.max(maxTemp, value.get());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将城市和最高温度存入 TreeMap 中，以温度为键，城市为值</span></span><br><span class="line">                cityTempMap.put(maxTemp, city);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 重写 cleanup 方法，在任务结束时输出结果</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">                <span class="comment">// 输出温度最高的 5 个城市和最高温度</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (Double temp : cityTempMap.descendingKeySet()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> cityTempMap.get(temp);</span><br><span class="line">                        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(city), <span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(temp));</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个主方法来运行任务</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="comment">// 创建一个 Configuration 对象</span></span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">            <span class="comment">// 创建一个 Job 对象</span></span><br><span class="line">            <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task03&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置运行类</span></span><br><span class="line">            job.setJarByClass(task03.class);</span><br><span class="line">            <span class="comment">// 设置 Mapper 类</span></span><br><span class="line">            job.setMapperClass(CityTempMapper.class);</span><br><span class="line">            <span class="comment">// 设置输出的 key 类型</span></span><br><span class="line">            job.setOutputKeyClass(Text.class);</span><br><span class="line">            <span class="comment">// 设置输出的 value 类型</span></span><br><span class="line">            job.setOutputValueClass(DoubleWritable.class);</span><br><span class="line">            <span class="comment">// 设置 Reducer 类</span></span><br><span class="line">            job.setReducerClass(CityTempReducer.class);</span><br><span class="line">            <span class="comment">// 设置输入路径</span></span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="comment">// 设置输出路径</span></span><br><span class="line">            FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">            <span class="comment">// 等待任务完成</span></span><br><span class="line">            System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第五套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第五套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第四套题</title>
      <link href="/2024/01/20/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%9B%9B%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/20/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E5%9B%9B%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第四套题"><a href="#第四套题" class="headerlink" title="第四套题:"></a>第四套题:</h1><h1 id="一、Python部分"><a href="#一、Python部分" class="headerlink" title="一、Python部分"></a>一、Python部分</h1><h2 id="1、数据处理"><a href="#1、数据处理" class="headerlink" title="1、数据处理"></a>1、数据处理</h2><p>1.删除shopping.csv中库存小于 10 或库存大于 10000 的数据，并存入shop1.csv；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/shopping.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除shopping.csv中库存小于 10 或库存大于10000 的数据，并存入shop1.csv</span></span><br><span class="line">df_1 = df.drop(df[(df[<span class="string">&#x27;库存&#x27;</span>] &lt; <span class="number">10</span>) | (df[<span class="string">&#x27;库存&#x27;</span>] &gt; <span class="number">10000</span>)].index)</span><br><span class="line"><span class="built_in">print</span>(df_1[<span class="string">&#x27;库存&#x27;</span>])</span><br><span class="line">df_1.to_csv(<span class="string">&quot;shop1.csv&quot;</span>)</span><br></pre></td></tr></table></figure><p>2.将涉及“刷单”、“捡漏”等字段的数据删除， 并存入shop2.csv；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/shopping.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将涉及“刷单”、“捡漏”等字段的数据删除， 并存入shop2.csv；</span></span><br><span class="line">df_1 = df.drop(df[(df[<span class="string">&#x27;名称&#x27;</span>] == <span class="string">&#x27;刷单&#x27;</span>) | (df[<span class="string">&#x27;名称&#x27;</span>]  == <span class="string">&#x27;捡漏&#x27;</span>)].index)</span><br><span class="line"><span class="built_in">print</span>(df_1[<span class="string">&#x27;名称&#x27;</span>])</span><br><span class="line">df_1.to_csv(<span class="string">&quot;shop2.csv&quot;</span>) </span><br></pre></td></tr></table></figure><p>3.将商品中涉及“女装”字段的数据删除，并存入 shop3.csv；</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/shopping.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将商品中涉及“女装”字段的数据删除，并存入 shop3.csv；</span></span><br><span class="line">df_1 = df.drop(df[df[<span class="string">&#x27;名称&#x27;</span>] == <span class="string">&#x27;女装&#x27;</span>].index)</span><br><span class="line"><span class="built_in">print</span>(df_1)</span><br></pre></td></tr></table></figure><p>4.将shopping.csv中手机价格为区间数据的，设置为 价格区间的平均数，存入shop4.csv。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/shopping.csv&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将shopping.csv中手机价格为区间数据的，设置为价格区间的平均数，存入shop4.csv。</span></span><br><span class="line">df[<span class="string">&#x27;平均数&#x27;</span>] = df[<span class="string">&#x27;价格&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">sum</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, x.split(<span class="string">&#x27;-&#x27;</span>))) //<span class="number">2</span> <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">in</span> x <span class="keyword">else</span> <span class="built_in">float</span>(x))</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;平均数&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="2、数据标注"><a href="#2、数据标注" class="headerlink" title="2、数据标注"></a>2、数据标注</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</span><br><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;./文本/model_comment.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用sonwnlp方法进行分析，得出情感值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">anzlyze</span>(<span class="params">comment</span>):</span><br><span class="line">    sentiment = SnowNLP(comment).sentiments <span class="comment"># sentiments情感分数</span></span><br><span class="line">    <span class="keyword">if</span> sentiment &gt;= <span class="number">0.6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;正向&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> sentiment &gt;= <span class="number">0.4</span> <span class="keyword">or</span> sentiment &lt;= <span class="number">0.6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;中性&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> sentiment &lt;= <span class="number">0.4</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;负向&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用上面定义好的 anzlyze 方法进行对手机商城评论信息挨个分析</span></span><br><span class="line">data[<span class="string">&#x27;情感倾向&#x27;</span>] = data[<span class="string">&#x27;评论信息&#x27;</span>].apply(anzlyze)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出正向 中性 负向的评论数据</span></span><br><span class="line">zheng = data[data[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;正向&#x27;</span>]</span><br><span class="line">zhong = data[data[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;中性&#x27;</span>]</span><br><span class="line">fu = data[data[<span class="string">&#x27;情感倾向&#x27;</span>] == <span class="string">&#x27;负向&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并正向 中性 负向的数据 ignore_index:忽略索引列</span></span><br><span class="line">data = pd.concat([zheng, zhong, fu], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据进行排序一下 sort_values:排序</span></span><br><span class="line">data.sort_values(by=<span class="string">&#x27;情感倾向&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存存入model_sen.csv</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;model_sen.csv&#x27;</span>, index=<span class="literal">False</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 打印</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h1 id="二、数据统计"><a href="#二、数据统计" class="headerlink" title="二、数据统计"></a>二、数据统计</h1><h2 id="hdfs操作"><a href="#hdfs操作" class="headerlink" title="hdfs操作"></a>hdfs操作</h2><p>1.首先你要将你需要运行的文件拷贝到root下和hdfs上面</p><p><strong>1.本地命令拷贝</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r 你存放文件的地方目录 root:你的机子ip地址:/root</span><br><span class="line"></span><br><span class="line"># 完整的语句 </span><br><span class="line">scp -r user_info.csv root@172.16.7.6:/root </span><br></pre></td></tr></table></figure><p>2、创建文件夹</p><p>1.在 HDFS 目录下新建目录&#x2F;input</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /input</span><br></pre></td></tr></table></figure><p>2.查看目录命令截图</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>3、下载 HDFS 新建目录&#x2F;input，到本地容器 Master 指定目录&#x2F;root&#x2F;下</p><ol><li>​<strong>-get是下载</strong></li><li>​<strong>-put是上传</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get  /input /root/</span><br></pre></td></tr></table></figure><p>查看一下root是否成功下载下来file2_1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># slave1</span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"></span><br><span class="line"># slave2</span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p>编写 MapReduce 程序，实现以下功能：清除数据中分 隔符混乱的，多于11个字段的数据，输出文件到HDFS；在 控制台按顺序打印输出前 10条数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskmapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, Text&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义一个map接收数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将value转换成字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 以制表符分割</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 判断小于11个字段输出</span></span><br><span class="line">            <span class="keyword">if</span> (fields.length &lt;= <span class="number">11</span>) &#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(line), <span class="keyword">new</span> <span class="title class_">Text</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个Reduce 继承 Reduce</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, Text, Text, Text&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义一个count 初始化为0</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 定义一个Reduce接收数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 输出清洗后的数据到HDFS</span></span><br><span class="line">            context.write(key, <span class="keyword">new</span> <span class="title class_">Text</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置输出输入路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置Job类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task08&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置运行类</span></span><br><span class="line">        job.setJarByClass(task08.class);</span><br><span class="line">        <span class="comment">// 设置map类</span></span><br><span class="line">        job.setMapperClass(taskmapper.class);</span><br><span class="line">        <span class="comment">// 设置Reduce类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key 类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value 类</span></span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置输入路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题:"></a>2.第二题:</h2><p>编写MapReduce程序，实现以下功能：根据 user_impression这一字段，统计买家对商家销售的手机商 品的印象，结果按照印象数降序排序，格式为： (user_impression,次数)，如：(性价比高,10)，结果保存 至HDFS，在控制台读取HDFS文件输出各组人数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.exercise1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task04</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个 taskMapper 继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text,Text, IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个 常量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义一个Text</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="comment">// 重写 map</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将 value 转换成 字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 制表符分割</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度</span></span><br><span class="line">            <span class="keyword">if</span>(fields.length &gt;= <span class="number">11</span>)&#123;</span><br><span class="line">                <span class="comment">// 获取user_impression并且空格分割</span></span><br><span class="line">                String[] impressions = fields[<span class="number">6</span>].split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String impression : impressions)&#123;</span><br><span class="line">                    <span class="comment">// 设置 status 为 impression</span></span><br><span class="line">                    status.set(impression);</span><br><span class="line">                    context.write(status,one);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个 Reducer 处理 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt;&#123;</span><br><span class="line">        <span class="comment">// 定义一个</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line">        <span class="comment">// 重写reduce</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 定义一个 count 为 0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历 value 累加count</span></span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values)&#123;</span><br><span class="line">                count += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 result 为 count</span></span><br><span class="line">            result.set(count);</span><br><span class="line">            <span class="comment">// 输出</span></span><br><span class="line">            context.write(key,result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置配置对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 设置 Job 类</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf,<span class="string">&quot;task04&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置 运行类</span></span><br><span class="line">        job.setJarByClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 map类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">// 设置 Reducer 类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置 key类</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置 value类</span></span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置输入累加</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出累加</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第四套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第四套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国赛题-第三套题</title>
      <link href="/2024/01/19/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%B8%89%E5%A5%97%E9%A2%98/"/>
      <url>/2024/01/19/%E5%9B%BD%E8%B5%9B%E9%A2%98-%E7%AC%AC%E4%B8%89%E5%A5%97%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第三套题"><a href="#第三套题" class="headerlink" title="第三套题"></a>第三套题</h1><h1 id="一、python部分"><a href="#一、python部分" class="headerlink" title="一、python部分"></a>一、python部分</h1><p>（ 1 ） 删 除 hotel.csv 中 商 圈 为 空 的 数 据 并 且 存 入 hotel2_c1_N.csv,N 为删除的数据条数；</p><ol><li><pre><code>shopping：这个是商圈的英文名称  </code></pre></li><li><pre><code>dropna：删除是否为空  </code></pre></li><li><pre><code>subset:判断哪一个字段</code></pre></li><li><pre><code>len：用于返回一个对象的长度或元素的数量。它可以用于字符串、列表、元组、字典、集合等可迭代对象。</code></pre></li><li><pre><code>to_csv:保存的csv文件</code></pre></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除商圈为空的数据</span></span><br><span class="line">df_1 = df.dropna(subset=[<span class="string">&#x27;shopping&#x27;</span>])</span><br><span class="line"><span class="comment"># 用len判断元素数量，然后用原数据减去删除的数据</span></span><br><span class="line">df_2 = <span class="built_in">len</span>(df) - <span class="built_in">len</span>(df_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据 encoding=&#x27;utf-8&#x27;:字符格式</span></span><br><span class="line">df.to_csv(<span class="string">f&#x27;hotel2_c1_<span class="subst">&#123;df_2&#125;</span>.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（2）删除 hotel.csv 中缺失值大于 3 个的数据列并且存 入 hotel2_c2_N.csv,N 为删除的数据列变量名，多列时用下划 线“_”间隔无顺序要求；</p><ol><li>columns: 判断每一列</li><li>isnull：判断哪个数据为空</li><li>sum：求和</li><li>join:是一个字符串方法用于元素拼接，并返回新的字符串</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除缺失值大于 3 个的数据</span></span><br><span class="line">df_1 = df.columns[df.isnull().<span class="built_in">sum</span>() &gt; <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 列时用下划 线“_”间隔无顺序要求；</span></span><br><span class="line">df_2 = <span class="string">&#x27;_&#x27;</span>.join(df_1)</span><br><span class="line"><span class="comment"># 用len判断元素数量，然后用原数据减去删除的数据</span></span><br><span class="line">df_3 = <span class="built_in">len</span>(df) - <span class="built_in">len</span>(df_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">df.to_csv(<span class="string">f&#x27;hotel2_c2_<span class="subst">&#123;drop_3&#125;</span>.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（3）将 hotel.csv 中评分为空的数据设置为 0 并且存入 hotel2_c3.csv； </p><ol><li>fillna:用来填数据中的缺失值</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评分为空的数据设置为 0 </span></span><br><span class="line">score = df[<span class="string">&#x27;score&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">df.to_csv(<span class="string">&#x27;hotel2_c3.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（4）将 hotel.csv 中评分为空的数据设置为总平均评分 并且存入 hotel2_c4_N.csv，N 为总平均评分保留一位小数。</p><ol><li>round:用来对数字进行四舍五入后面逗号的 1 是总平均评分保留一位小数</li><li>mea():计算平均数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中评分为空的数据设置为总平均评分 </span></span><br><span class="line">score = <span class="built_in">round</span>(df[<span class="string">&#x27;score&#x27;</span>].mean(), <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line">df.to_csv(<span class="string">f&#x27;hotel2_c4_<span class="subst">&#123;score&#125;</span>.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="二、数据统计MapReduce"><a href="#二、数据统计MapReduce" class="headerlink" title="二、数据统计MapReduce"></a>二、数据统计MapReduce</h1><h2 id="hdfs操作"><a href="#hdfs操作" class="headerlink" title="hdfs操作"></a>hdfs操作</h2><p>1.首先你要将user_info.csv拷贝到root下和hdfs上面</p><p><strong>1.本地命令拷贝</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r 你存放文件的地方目录 root:你的机子ip地址:/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span> </span><br><span class="line">scp -r user_info.csv root@172.16.7.6:/root </span><br></pre></td></tr></table></figure><p>2、创建文件夹</p><p>1.在 HDFS 目录下新建目录&#x2F;file2_1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir /file2_1</span><br></pre></td></tr></table></figure><p>2.查看目录命令截图</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>3、修改权限</p><p>1.修改权限，赋予目录&#x2F;file2_1 最高 777 权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chmod 777 /file2_1</span><br></pre></td></tr></table></figure><p>2.查看 目录权限截图</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /</span><br></pre></td></tr></table></figure><p>4、下载 HDFS 新建目录&#x2F;file2_1，到本地容器 Master 指定目录&#x2F;root&#x2F;下</p><ol><li>​<strong>-get是下载</strong></li><li>​<strong>-put是上传</strong></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfs -get  /file2-1 /root/</span><br></pre></td></tr></table></figure><p>查看一下root是否成功下载下来file2_1</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>6.如果遇到：</p><p><strong>mkdir: Cannot create directory &#x2F;input. Name node is in safe mode.（意思是hadoop安全模式正在开启，要关掉才可以新建）</strong></p><p><strong>hadoop强制关掉安全模式:</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs dfsadmin -safemode forceExit</span><br></pre></td></tr></table></figure><p>出现：<strong>Safe mode is OFF</strong> 就代表关掉成功了</p><h3 id="修改mapred-site-xml-文件"><a href="#修改mapred-site-xml-文件" class="headerlink" title="修改mapred-site.xml 文件"></a>修改mapred-site.xml 文件</h3><p>1.cd到hadoop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>2.vi编辑一下mapred-site.xml</p><p>​将下面的复制到mapred-site.xml 里面</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3这是是你自己安装在哪个的文件目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;HADOOP_MAPRED_HOME=/usr/local/src/hadoop-3.1.3&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>3.重启一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><p>4.将mapred-site.xml 拷贝到两台机子</p><p>​&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F; （<strong>这个是你自己的文件存放目录</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">scp mapred-site.xml slave1:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">scp mapred-site.xml slave2:/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure><p>5.最后启动一下hadoop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>要是运行出错可能Hadoop没有启动完，稍微等一下就好了</p><h2 id="1-第一题"><a href="#1-第一题" class="headerlink" title="1.第一题"></a>1.第一题</h2><p>编写 MapReduce 程序，实现以下功能：将 user_info.csv 数据的分隔符“，”转换为“|”，输出文件到 HDFS，然后 在在控制台按顺序打印输出前 10 条数据</p><h4 id="MapReduce代码"><a href="#MapReduce代码" class="headerlink" title="MapReduce代码"></a>MapReduce代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.NullWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *编写 MapReduce 程序，实现以下功能：将 user_info.csv</span></span><br><span class="line"><span class="comment"> * 数据的分隔符“，”转换为“|”</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">task01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//todo 初始化config配置项</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//todo 设置job任务,设置任务的名称</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;task01&quot;</span>);</span><br><span class="line">        <span class="comment">//todo 设置job任务主类</span></span><br><span class="line">        job.setJarByClass(task01.class);</span><br><span class="line">        <span class="comment">//todo 设置mapper类</span></span><br><span class="line">        job.setMapperClass(taskMapper.class);</span><br><span class="line">        <span class="comment">//todo 设置output key输出的类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">//todo 设置output value输出的类型</span></span><br><span class="line">        job.setOutputValueClass(NullWritable.class);</span><br><span class="line">        <span class="comment">// todo 获取输出文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// todo 获取hdfs文件路径</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> outPath.getFileSystem(conf);</span><br><span class="line">        <span class="comment">// todo 判断输出文件路径是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (fileSystem.exists(outPath)) &#123;</span><br><span class="line">            <span class="comment">// todo 直接删除文件目录</span></span><br><span class="line">            fileSystem.delete(outPath, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//todo 第一个参数为输入的文件路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">//todo 第二个参数为输出的文件路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">taskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, NullWritable&gt;&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Text</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, NullWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将逗号修改为 |</span></span><br><span class="line">            text.set(value.toString().replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">            context.write(text, NullWritable.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-第二题"><a href="#2-第二题" class="headerlink" title="2.第二题"></a>2.第二题</h2><p>编写 MapReduce 程序，实现以下功能： 对于 order_status 这一字段统计每种状态的订单总数，将结果写 入 HDFS，在控制台读取 HDFS 文件</p><p>(步骤和上面一样，注意：类名不一样还有定义的名称)</p><h4 id="MapReduce代码-1"><a href="#MapReduce代码-1" class="headerlink" title="MapReduce代码"></a>MapReduce代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderStatusMR</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 Map 类，继承 Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Map</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义常量 1</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 定义 Text 对象，用于存储 order_status</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 map 方法，接收键值对，输出键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 将 value 转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> value.toString();</span><br><span class="line">            <span class="comment">// 按照逗号分隔字符串，得到一个数组</span></span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">// 判断数组长度是否合法，至少应该有 20 个字段</span></span><br><span class="line">            <span class="keyword">if</span> (fields.length &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取 order_status 字段，位于第 5 个位置</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">order_status</span> <span class="operator">=</span> fields[<span class="number">4</span>];</span><br><span class="line">                <span class="comment">// 设置 status 为 order_status</span></span><br><span class="line">                status.set(order_status);</span><br><span class="line">                <span class="comment">// 输出键值对，键是 order_status，值是 1</span></span><br><span class="line">                context.write(status, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 Reduce 类，继承 Reducer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Reduce</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="comment">// 定义 IntWritable 对象，用于存储 count</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义 reduce 方法，接收键值对，输出键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">// 初始化 count 为 0</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历 values 集合，累加 count</span></span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                count += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置 result 为 count</span></span><br><span class="line">            result.set(count);</span><br><span class="line">            <span class="comment">// 输出键值对，键是 order_status，值是 count</span></span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 Driver 类，设置输入和输出路径，以及 Map 和 Reduce 类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 创建 Job 对象</span></span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;OrderStatusMR&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置运行类</span></span><br><span class="line">        job.setJarByClass(OrderStatusMR.class);</span><br><span class="line">        <span class="comment">// 设置 Map 类</span></span><br><span class="line">        job.setMapperClass(Map.class);</span><br><span class="line">        <span class="comment">// 设置 Reduce 类</span></span><br><span class="line">        job.setReducerClass(Reduce.class);</span><br><span class="line">        <span class="comment">// 设置输出键的类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        <span class="comment">// 设置输出值的类型</span></span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        <span class="comment">// 设置输入路径，从命令行参数获取</span></span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 设置输出路径，从命令行参数获取</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        <span class="comment">// 等待任务完成</span></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最后一步运行JAR环境包"><a href="#最后一步运行JAR环境包" class="headerlink" title="最后一步运行JAR环境包"></a>最后一步运行JAR环境包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop jar jar包名 idea里面java类名 /csv文件 /随意起一个输出结果文件名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完整的语句</span></span><br><span class="line">hadoop jar /root/file2_1.jar org.example.task01 /user_info.csv /file2_1_out</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛题-第三套题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国赛题-第三套题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Request数据爬取</title>
      <link href="/2023/12/07/Python-Requests%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
      <url>/2023/12/07/Python-Requests%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="需要引入的库"><a href="#需要引入的库" class="headerlink" title="需要引入的库"></a>需要引入的库</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Requests</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from lxml import etree</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">from lxml import etree</span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">class TqSpider:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 请求的ip地址</span><br><span class="line">        self.index_url = &#x27;http://127.0.0.1:5000/&#x27;</span><br><span class="line">        # 请求头</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            &quot;Cookie&quot;: &#x27;salt=&quot;\302\210D\303\2609\302\221\007\302\230\302\211f9\303\254J:U\027\303\205V\302\276\302\213\303\257\303\227\303\230\303\223\303\246\302\230*4&quot;&#x27;,</span><br><span class="line">            # 要从首页跳转 127.0.0.1:5000 </span><br><span class="line">            &quot;Referer&quot;: &quot;http://127.0.0.1:5000/&quot;,</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        self.base_url = &quot;http://127.0.0.1:5000/city_weather?city=&#123;&#125;&amp;page=&#123;&#125;&amp;TOKEN=&#123;&#125;&quot;</span><br><span class="line">        # 创建文件夹 天</span><br><span class="line">        self.day_dir = &quot;day_data&quot;</span><br><span class="line">        # 创建文件夹 月</span><br><span class="line">        self.month_dir = &quot;month_data&quot;</span><br><span class="line">        # 判断</span><br><span class="line">        if not os.path.exists(self.day_dir):</span><br><span class="line">            os.makedirs(self.day_dir)</span><br><span class="line">        if not os.path.exists(self.month_dir):</span><br><span class="line">            os.makedirs(self.month_dir)</span><br><span class="line"></span><br><span class="line">    def get_html(self, url):</span><br><span class="line">        # 发送请求</span><br><span class="line">        resp = requests.get(url=url, headers=self.headers)</span><br><span class="line">        return resp.content.decode()</span><br><span class="line"></span><br><span class="line">    # 城市(city)</span><br><span class="line">    def parse_citys(self):</span><br><span class="line">        # 首页</span><br><span class="line">        index_content = self.get_html(self.index_url)</span><br><span class="line">        # 返回 HTML 标签对象</span><br><span class="line">        p = etree.HTML(index_content)</span><br><span class="line">        # city 列表</span><br><span class="line">        city_list = p.xpath(&quot;//div[@class=&#x27;right&#x27;]/span/button/text()&quot;)</span><br><span class="line">        print(city_list)</span><br><span class="line">        return city_list</span><br><span class="line"></span><br><span class="line">    def encode_time(self, t):</span><br><span class="line">        byte_t = t.encode(&#x27;utf-8&#x27;)</span><br><span class="line">        encode_t = base64.b64encode(byte_t)</span><br><span class="line">        encode_t_s = encode_t.decode(&#x27;utf-8&#x27;)</span><br><span class="line">        print(encode_t_s)</span><br><span class="line">        return encode_t_s</span><br><span class="line"></span><br><span class="line">    def parse_month_data(self, p, city, page):</span><br><span class="line">        &quot;&quot;&quot;解析月汇总数据&quot;&quot;&quot;</span><br><span class="line">        # 平均高温</span><br><span class="line">        avg_high_gaowen = p.xpath(&quot;//ul/li/span[@class=&#x27;high-avg&#x27;]/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        # 平均低温</span><br><span class="line">        avg_high_diwen = p.xpath(&quot;//ul/li/span[@class=&#x27;low-avg&#x27;]/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        # 极端高温</span><br><span class="line">        avg_high_jdgw = p.xpath(&quot;//ul/li[2]/span/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        # 极端低温</span><br><span class="line">        avg_high_jddw = p.xpath(&quot;//ul/li[3]/span/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        # 平均空气质量指数</span><br><span class="line">        avg_high_pjkqz = p.xpath(&quot;//ul/li[4]/span/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        # 空气最好(01/05)</span><br><span class="line">        avg_high_kqzh = p.xpath(&quot;//ul/li[5]/span/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        avg_high_kqzh_2 = p.xpath(&quot;//ul/li[5]/span/text()&quot;)[0].strip()[5:-1]</span><br><span class="line">        # 空气最差(01/03)</span><br><span class="line">        avg_high_kqzc = p.xpath(&quot;//ul/li[6]/span/span[@class=&#x27;digit&#x27;]/text()&quot;)[0]</span><br><span class="line">        avg_high_kqzc_2 = p.xpath(&quot;//ul/li[6]/span/text()&quot;)[0].strip()[5:-1]</span><br><span class="line">        data = [city, &#x27;%d月&#x27; % page, avg_high_gaowen, avg_high_diwen, avg_high_jdgw, avg_high_jddw, avg_high_pjkqz,</span><br><span class="line">                avg_high_kqzh, avg_high_kqzh_2, avg_high_kqzc, avg_high_kqzc_2]</span><br><span class="line">        print(data)</span><br><span class="line">        return data</span><br><span class="line"></span><br><span class="line">    def parse_day_data(self, p, city):</span><br><span class="line">        &quot;&quot;&quot;解析每日数据&quot;&quot;&quot;</span><br><span class="line">        day_datas = []</span><br><span class="line">        tr_list = p.xpath(&quot;//table[@class=&#x27;tianqi&#x27;]//tr&quot;)[1:]</span><br><span class="line">        for tr in tr_list:</span><br><span class="line">            #日期</span><br><span class="line">            riqi = tr.xpath(&quot;./td[1]/text()&quot;)[0]</span><br><span class="line">            # 最高气温</span><br><span class="line">            zgqw = tr.xpath(&quot;./td[2]/text()&quot;)[0]</span><br><span class="line">            # 最低气温</span><br><span class="line">            zdqw = tr.xpath(&quot;./td[3]/text()&quot;)[0]</span><br><span class="line">            # 天气</span><br><span class="line">            tq = tr.xpath(&quot;./td[4]/text()&quot;)[0]</span><br><span class="line">            # 风向</span><br><span class="line">            fx = tr.xpath(&quot;./td[5]/text()&quot;)[0]</span><br><span class="line">            data = [city, riqi, zgqw, zdqw, tq, fx]</span><br><span class="line">            print(data)</span><br><span class="line">            # 列表</span><br><span class="line">            day_datas.append(data)</span><br><span class="line">        return day_datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def parse_city_data(self, city):</span><br><span class="line">        &quot;&quot;&quot;传入url,爬取数据&quot;&quot;&quot;</span><br><span class="line">        day_data_list, month_data_list = [], []</span><br><span class="line">        for page in range(1, 13):</span><br><span class="line">            now = str(int(time.time() * 1000))</span><br><span class="line">            # 加密</span><br><span class="line">            token = self.encode_time(now)</span><br><span class="line">            # 拼接</span><br><span class="line">            url = self.base_url.format(city, page, token)</span><br><span class="line">            # 发送请求</span><br><span class="line">            page_content = self.get_html(url)</span><br><span class="line">            # 休眠</span><br><span class="line">            time.sleep(1.6)</span><br><span class="line">            p = etree.HTML(page_content)</span><br><span class="line">            # 解析一个月汇总数据</span><br><span class="line">            one_month_data = self.parse_month_data(p, city, page)</span><br><span class="line">            month_data_list.append(one_month_data)</span><br><span class="line">            # 解析一个月中每天数据</span><br><span class="line">            day_datas = self.parse_day_data(p, city)</span><br><span class="line">            day_data_list.extend(day_datas)</span><br><span class="line">        # 将一个城市数据存入csv文件中</span><br><span class="line">        day_path = os.path.join(self.day_dir, &#x27;%s_day.csv&#x27; % city)</span><br><span class="line">        month_path = os.path.join(self.month_dir, &#x27;%s_month.csv&#x27; % city)</span><br><span class="line">        with open(day_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as f:</span><br><span class="line">            writer = csv.writer(f)</span><br><span class="line">            writer.writerow([&#x27;城市&#x27;, &#x27;日期&#x27;, &#x27;最高气温&#x27;, &#x27;最低气温&#x27;, &#x27;天气&#x27;, &#x27;风向&#x27;])</span><br><span class="line">            writer.writerows(day_data_list)</span><br><span class="line">        with open(month_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as f:</span><br><span class="line">            writer = csv.writer(f)</span><br><span class="line">            writer.writerow([&#x27;城市&#x27;, &#x27;月份&#x27;, &#x27;平均高温&#x27;, &#x27;平均低温&#x27;, &#x27;极端高温&#x27;, &#x27;极端低温&#x27;, &#x27;平均空气质量指数&#x27;,</span><br><span class="line">                             &#x27;空气最好&#x27;, &#x27;空气最好日期&#x27;, &#x27;空气最差&#x27;, &#x27;空气最差日期&#x27;])</span><br><span class="line">            writer.writerows(month_data_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def get_all_data(self):</span><br><span class="line">        # huoqu suoyou chengshi</span><br><span class="line">        citys = self.parse_citys()</span><br><span class="line">        for city in citys:</span><br><span class="line">            self.parse_city_data(city)</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.get_all_data()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    spider = TqSpider()</span><br><span class="line">    spider.run()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Python-Request数据爬取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-Request数据爬取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-scrapy数据爬取</title>
      <link href="/2023/11/19/Python-scrapy%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
      <url>/2023/11/19/Python-scrapy%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="新建一个项目"><a href="#新建一个项目" class="headerlink" title="新建一个项目"></a>新建一个项目</h1><h2 id="Windows：打开cmd，输入"><a href="#Windows：打开cmd，输入" class="headerlink" title="Windows：打开cmd，输入:"></a>Windows：打开cmd，输入:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple scrapy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 文件夹名称</span><br><span class="line">cd 到你刚创建的文件夹</span><br></pre></td></tr></table></figure><p>直接调用<strong>scrapy</strong>这个库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrapy startproject 你要创建文件名称</span><br></pre></td></tr></table></figure><p>这样子创建文件夹的工程就好了</p><h3 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到你刚刚新建的目录</span><br></pre></td></tr></table></figure><p>创建爬虫的py文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrapy genspider 爬虫名称 这个是网址</span><br></pre></td></tr></table></figure><p>看到Created spider就代表创建成</p><h3 id="ubantu终端启动pycharm"><a href="#ubantu终端启动pycharm" class="headerlink" title="ubantu终端启动pycharm"></a>ubantu终端启动pycharm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 到你的pycharm的根目录</span><br></pre></td></tr></table></figure><p><strong>启动</strong><br>直接键入即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./pycharm.sh</span><br></pre></td></tr></table></figure><p>你新建完之后直接打开，然后里面有一个hotel_scrapy你键 的文件直接在这里面写代码就可以了</p><h3 id="写完代码启动程序"><a href="#写完代码启动程序" class="headerlink" title="写完代码启动程序"></a>写完代码启动程序</h3><p>要到你创建的文件目录下启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scrapy crawl 程序名称</span><br></pre></td></tr></table></figure><h1 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> import pandas as pd</span><br><span class="line">import scrapy</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">class HotelSpiderSpider(scrapy.Spider):</span><br><span class="line">    name = &quot;hotel_spider&quot;</span><br><span class="line">    allowed_domains = [&quot;172.16.7.8&quot;]</span><br><span class="line">    # 采集地址</span><br><span class="line">    base_url = &quot;http://172.16.7.8&quot;</span><br><span class="line">    # 页码从第一页开始</span><br><span class="line">    start_page = 1</span><br><span class="line"></span><br><span class="line">    # 生产起始的url，先从城市开始</span><br><span class="line">    def start_requests(self):</span><br><span class="line">        for city_id in range(1,4):</span><br><span class="line">            #  yield scrapy.Request：是一个固定的方法   self是一个方法</span><br><span class="line">            # 一个个去请求 city_id是城市  start_page是页码</span><br><span class="line">            # callback=self.parse_first_page:把拿回来的数据给parse_first_page来处理</span><br><span class="line">            # meta=&#123;&#x27;cityId&#x27;:city_id&#125;：再把city_id传递</span><br><span class="line">            yield scrapy.Request(f&#x27;&#123;self.base_url&#125;/?cityId=&#123;city_id&#125;&amp;pageNum=&#123;self.start_page&#125;&#x27;,callback=self.parse_first_page,meta=&#123;&#x27;cityId&#x27;: city_id&#125;)</span><br><span class="line"></span><br><span class="line">    # 处理每个城市的首页，主要用来获取页数</span><br><span class="line">    def parse_first_page(self,response):</span><br><span class="line">        # 提取酒店的信息</span><br><span class="line">        # 把所有包含card-body类的duv全部拿回来</span><br><span class="line">        hotels = response.css(&#x27;div.card-body&#x27;)</span><br><span class="line">        # 城市</span><br><span class="line">        cityid = response.meta[&#x27;cityId&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 解析页码</span><br><span class="line">        for hotel in hotels:</span><br><span class="line">            # 酒店名称</span><br><span class="line">            hotel_name = hotel.css(&#x27;h5.card-title a::text&#x27;).get()</span><br><span class="line">            # 城市名</span><br><span class="line">            city = &#x27;&#x27;</span><br><span class="line">            if cityid == 1:</span><br><span class="line">                city = &#x27;北京&#x27;</span><br><span class="line">            elif cityid == 2:</span><br><span class="line">                city = &#x27;上海&#x27;</span><br><span class="line">            elif cityid == 3:</span><br><span class="line">                city = &#x27;广州&#x27;</span><br><span class="line">            elif cityid == 4:</span><br><span class="line">                city = &#x27;深圳&#x27;</span><br><span class="line"></span><br><span class="line">            # 星级</span><br><span class="line">            start = len(hotel.xpath(&#x27;p[1]//i&#x27;).getall())</span><br><span class="line"></span><br><span class="line">            # 评分</span><br><span class="line">            # [4:]从第四个开始取后面的数据</span><br><span class="line">            rating = hotel.xpath(&#x27;p[3]//text()&#x27;).get()[4:]</span><br><span class="line"></span><br><span class="line">            # 获取详情页的信息</span><br><span class="line">            detail_url = hotel.css(&#x27;h5.card-title a::attr(href)&#x27;).get()</span><br><span class="line">            # 获取数据并且处理</span><br><span class="line">            yield scrapy.Request(f&#x27;&#123;self.base_url&#125;&#123;detail_url&#125;&#x27;,callback=self.parse_detail,meta=&#123;&#x27;hotel_name&#x27;: hotel_name, &#x27;city&#x27;: city, &#x27;start&#x27;: start, &#x27;rating&#x27;: rating&#125;)</span><br><span class="line"></span><br><span class="line">            # 获取页码</span><br><span class="line">            # [-2]从倒数第二个开始取 int：转换数字类型</span><br><span class="line">            last_page_num_text = int(response.css(&#x27;a.page-link::text&#x27;)[-2].get())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            # 生产每一页的url(从第二页开始，到最后一页)</span><br><span class="line">            for page_num in range(self.start_page+1,last_page_num_text+1):</span><br><span class="line">                url = f&#x27;&#123;self.base_url&#125;/?cityId=&#123;cityid&#125;&amp;pageNum=&#123;page_num&#125;&#x27;</span><br><span class="line">                # 调用一个处理程序</span><br><span class="line">                yield scrapy.Request(url, callback=self.parse, meta=&#123;&#x27;cityId&#x27;: cityid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 提取酒店的信息</span><br><span class="line">    def parse(self, response):</span><br><span class="line"></span><br><span class="line">        # 把所有包含card-body类的duv全部拿回来</span><br><span class="line">        hotels = response.css(&#x27;div.card-body&#x27;)</span><br><span class="line">        # 城市</span><br><span class="line">        cityid = response.meta[&#x27;cityId&#x27;]</span><br><span class="line"></span><br><span class="line">        # 解析页码</span><br><span class="line">        for hotel in hotels:</span><br><span class="line">            # 酒店名称</span><br><span class="line">            hotel_name = hotel.css(&#x27;h5.card-title a::text&#x27;).get()</span><br><span class="line">            # 城市名</span><br><span class="line">            city = &#x27;&#x27;</span><br><span class="line">            if cityid == 1:</span><br><span class="line">                city = &#x27;北京&#x27;</span><br><span class="line">            elif cityid == 2:</span><br><span class="line">                city = &#x27;上海&#x27;</span><br><span class="line">            elif cityid == 3:</span><br><span class="line">                city = &#x27;广州&#x27;</span><br><span class="line">            elif cityid == 4:</span><br><span class="line">                city = &#x27;深圳&#x27;</span><br><span class="line"></span><br><span class="line">            # 星级</span><br><span class="line">            start = len(hotel.xpath(&#x27;p[1]//i&#x27;).getall())</span><br><span class="line"></span><br><span class="line">            # 评分</span><br><span class="line">            # [4:]从第四个开始取后面的数据</span><br><span class="line">            rating = hotel.xpath(&#x27;p[3]//text()&#x27;).get()[4:]</span><br><span class="line"></span><br><span class="line">            # 获取详情页的信息</span><br><span class="line">            detail_url = hotel.css(&#x27;h5.card-title a::attr(href)&#x27;).get()</span><br><span class="line">            # 获取数据并且处理</span><br><span class="line">            yield scrapy.Request(f&#x27;&#123;self.base_url&#125;&#123;detail_url&#125;&#x27;, callback=self.parse_detail,meta=&#123;&#x27;hotel_name&#x27;: hotel_name,&#x27;city&#x27;: city,&#x27;start&#x27;: start,&#x27;rating&#x27;: rating&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 酒店的基本信息</span><br><span class="line">    def parse_detail(self,response):</span><br><span class="line">        # 把数据取再拿出来一下</span><br><span class="line">        hotel_name = response.meta[&#x27;hotel_name&#x27;]</span><br><span class="line">        city = response.meta[&#x27;city&#x27;]</span><br><span class="line">        start = response.meta[&#x27;start&#x27;]</span><br><span class="line">        rating = response.meta[&#x27;rating&#x27;]</span><br><span class="line"></span><br><span class="line">        # 房间数量</span><br><span class="line">        rooms = 0</span><br><span class="line">        hotel_room_num = response.xpath(&#x27;//*[@id=&quot;room-types&quot;]//div/p[2]/span//text()&#x27;).getall()</span><br><span class="line">        for room_num in hotel_room_num:</span><br><span class="line">            rooms = rooms + int(room_num.strip())  # strip清除前后空白字符</span><br><span class="line"></span><br><span class="line">        # 图片数量</span><br><span class="line">        images = len(response.xpath(&#x27;//*[@id=&quot;room-types&quot;]//div/img&#x27;).getall())</span><br><span class="line"></span><br><span class="line">        # 评论数量</span><br><span class="line">        comments = len(response.css(&#x27;div.user-comment&#x27;))</span><br><span class="line"></span><br><span class="line">        # 把采集到的数据保存到DataFrame</span><br><span class="line">        data = &#123;&#x27;酒店名称&#x27;: [hotel_name], &#x27;城市&#x27;: [city], &#x27;星级&#x27;: [start], &#x27;评分&#x27;: rating,&#x27;房间数&#x27;: [hotel_room_num] ,&#x27;图片数&#x27;: [images], &#x27;评论数&#x27;: [comments]&#125;</span><br><span class="line">        df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">        # 判断csv是否存在，不存在就新建，存在就追加</span><br><span class="line">        if not os.path.isfile(&#x27;hotel.csv&#x27;):</span><br><span class="line">            df.to_csv(&#x27;hotel.csv&#x27;,index=False)</span><br><span class="line">        else:</span><br><span class="line">            # mode=&#x27;a&#x27;:追加   header=False：不需要表头</span><br><span class="line">            df.to_csv(&#x27;hotel.csv&#x27;, mode=&#x27;a&#x27;, header=False, index=False)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="数据分析处理"><a href="#数据分析处理" class="headerlink" title="数据分析处理"></a>数据分析处理</h1><h2 id="重新新建一个python环境"><a href="#重新新建一个python环境" class="headerlink" title="重新新建一个python环境"></a>重新新建一个python环境</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># 读取 hotel2.csv文件</span><br><span class="line">df = pd.read_csv(&#x27;hotel2.csv&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># 删除酒店名称为空的，并且保存3为hotel2_c1.csv</span><br><span class="line">df_c1 = df.dropna(subset=[&#x27;酒店名称&#x27;])</span><br><span class="line">df_c1.to_csv(&#x27;hotel2_c1.csv&#x27;,index=False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># 删除缺失大于3个的记录，并且保存hotel2_c2.csv, shape[1]用来计算列的数量</span><br><span class="line">df_c2 = df.dropna(thresh=df.shape[1]-3)</span><br><span class="line">df_c2.to_csv(&#x27;hotel2_c2.csv&#x27;,index=False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># 将评分为空的填0并且保存hotel2_c3.csv</span><br><span class="line"># copy：拷贝一个</span><br><span class="line">df_c3 = df.copy()</span><br><span class="line">df_c3[&#x27;评分&#x27;] = df_c3[&#x27;评分&#x27;].fillna(0)  # fillna:把空的单元格填上什么值</span><br><span class="line">df_c3.to_csv(&#x27;hotel2_c3.csv&#x27;,index=False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 评分为空的填平均值并且保存hotel2_c4.csv</span><br><span class="line">df_c4 = df.copy()</span><br><span class="line"># df_c4[&#x27;评分&#x27;].mean()用来保存的数据为平均分</span><br><span class="line">df_c4[&#x27;评分&#x27;] = df_c4[&#x27;评分&#x27;].fillna(df_c4[&#x27;评分&#x27;].mean())</span><br><span class="line">df_c4.to_csv(&#x27;hotel2_c4.csv&#x27;,index=False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># 删除缺失大于3个的记录，并且保存hotel2_c2.csv, shape[1]用来计算列的数量</span><br><span class="line">df_c2 = df.dropna(thresh=df.shape[1]-3)</span><br><span class="line">df_c2.to_csv(&#x27;hotel2_c2.csv&#x27;,index=False,encoding=&#x27;utf-8&#x27;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Python-scrapy数据爬取 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python-scrapy数据爬取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts-可视化</title>
      <link href="/2023/10/09/ECharts-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
      <url>/2023/10/09/ECharts-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="可视化代码"><a href="#可视化代码" class="headerlink" title="可视化代码"></a>可视化代码</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>可视化全部代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;可视化&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 数据绑定 --&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;div id=&quot;chart1&quot; style=&quot;height:500px;width:1000px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- 引入Vue框架 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.5.0/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;module&quot;&gt;</span><br><span class="line">    import * as echarts from &quot;https://cdn.bootcdn.net/ajax/libs/echarts/5.4.3/echarts.esm.min.js&quot;;</span><br><span class="line"></span><br><span class="line">    // 挂载Vue 相当于声明变量</span><br><span class="line">    const &#123; createApp &#125; = Vue;</span><br><span class="line">    createApp(&#123;</span><br><span class="line">        // 方法结构</span><br><span class="line">        data() &#123;</span><br><span class="line">            // 返回需要的各种变量</span><br><span class="line">            return &#123;</span><br><span class="line">                title: &quot;你好&quot;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 页面挂载完毕后执行的方法</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            // 把取回来的数据拿出来</span><br><span class="line">            axios.get(&quot;http://jtwz.gxaliyun.com/wti0901.json&quot;).then(box =&gt; &#123;</span><br><span class="line">                console.log(box.data);</span><br><span class="line">                // 排序，根据close_price从大到小排，使用冒泡排序</span><br><span class="line">                for (let i = 0; i &lt; box.data.data.length; i++) &#123;</span><br><span class="line">                    for (let j = 0; j &lt; i; j++) &#123;</span><br><span class="line">                        // 两两比较 如果第一个数比第二个数要小，就交换位置</span><br><span class="line">                        if (box.data.data[j].close_price &lt; box.data.data[i].close_price) &#123;</span><br><span class="line">                            let temp = box.data.data[j];</span><br><span class="line">                            box.data.data[j] = box.data.data[i];</span><br><span class="line">                            box.data.data[i] = temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                console.log(box.data.data);</span><br><span class="line"></span><br><span class="line">                // 取数组的前五个元素</span><br><span class="line">                let arr = [];</span><br><span class="line">                for (let i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">                    arr.push(box.data.data[i])</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 开始画图</span><br><span class="line">                let chartDom = document.getElementById(&quot;chart1&quot;);</span><br><span class="line">                let echart = echarts.init(chartDom);</span><br><span class="line">                // 定义图标</span><br><span class="line">                let optios = &#123;</span><br><span class="line">                    xAxis: &#123;</span><br><span class="line">                        type: &#x27;category&#x27;,</span><br><span class="line">                        data: arr.map(x=&gt;&#123;</span><br><span class="line">                            return x.day</span><br><span class="line">                        &#125;),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    yAxis: &#123;</span><br><span class="line">                        type: &#x27;value&#x27;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    series: [&#123;</span><br><span class="line">                        data: arr.map(x=&gt;&#123;</span><br><span class="line">                            return x.close_price</span><br><span class="line">                        &#125;),</span><br><span class="line">                        type: &#x27;bar&#x27;</span><br><span class="line">                    &#125;]</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                // exharts显示</span><br><span class="line">                optios &amp;&amp; echart.setOption(optios);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;).mount(&quot;#app&quot;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Echarts-可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts-可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark数据抽取3</title>
      <link href="/2023/10/06/Spark%E7%BC%96%E5%86%99-3/"/>
      <url>/2023/10/06/Spark%E7%BC%96%E5%86%99-3/</url>
      
        <content type="html"><![CDATA[<h1 id="阶段三实施数据抽取"><a href="#阶段三实施数据抽取" class="headerlink" title="阶段三实施数据抽取"></a>阶段三实施数据抽取</h1><h2 id="数据库要用到的表"><a href="#数据库要用到的表" class="headerlink" title="数据库要用到的表"></a>数据库要用到的表</h2><p><a href="https://pan.baidu.com/s/1u7TbwGgq61hRanNXgs23XA">shtu_student</a></p><h1 id="在工作之前要先保证‘zookeeper’和‘kafka’可以正常启动"><a href="#在工作之前要先保证‘zookeeper’和‘kafka’可以正常启动" class="headerlink" title="在工作之前要先保证‘zookeeper’和‘kafka’可以正常启动"></a>在工作之前要先保证‘zookeeper’和‘kafka’可以正常启动</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>这个顺序是要先启动zookeeper</li><li>注意要启动三台机子才可以<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure></li><li>检查状态确保运行正常 三台机子启动完两个follower和一个leader<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>启动 zookeeper<br><img src="/../img/big_data/phase3/zookeeper1.jpg" alt="OIP _3_.jpg"><br><img src="/../img/big_data/phase3/zookeeper2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>启动kafka （注意三台机子都要）</li><li>只要启动什么都没有就是成功了</li><li>最后jps看一下有kafka就可以了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.properties</span><br></pre></td></tr></table></figure>这个是停掉kafka的命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-stop.sh</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="创建主题-可以理解为数据库"><a href="#创建主题-可以理解为数据库" class="headerlink" title="创建主题 (可以理解为数据库)"></a>创建主题 (可以理解为数据库)</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>test是看比赛题目(这些名字到时候比赛会明确给出)</li><li>–replication-factor副本</li><li>–partition分区<br>第一个<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper master:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>第二个<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper master:2181 --replication-factor 1 --partitions 1 --topic dim_class</span><br></pre></td></tr></table></figure>第三个<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper master:2181 --replication-factor 1 --partitions 1 --topic dim_score</span><br></pre></td></tr></table></figure>第四个<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper master:2181 --replication-factor 1 --partitions 1 --topic dim_student</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>成功标识出现Created topic test.<br><img src="/../img/big_data/phase3/kafka1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>用idea来做，写完代码直接运行即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.google.gson.JsonParser</span><br><span class="line">import org.apache.flink.api.common.serialization.SimpleStringSchema</span><br><span class="line">import org.apache.flink.streaming.api.functions.ProcessFunction</span><br><span class="line">import org.apache.flink.streaming.api.scala.&#123;OutputTag, StreamExecutionEnvironment, createTypeInformation&#125;</span><br><span class="line">import org.apache.flink.streaming.connectors.kafka.&#123;FlinkKafkaConsumer, FlinkKafkaProducer&#125;</span><br><span class="line">import org.apache.flink.util.Collector</span><br><span class="line"></span><br><span class="line">import java.util.Properties</span><br><span class="line"></span><br><span class="line">object Task4 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    // 准备运行环境</span><br><span class="line">    val env = StreamExecutionEnvironment.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(1)</span><br><span class="line"></span><br><span class="line">    // 数据来源</span><br><span class="line">    val prop=new Properties()</span><br><span class="line">    // kafka的地址</span><br><span class="line">    prop.setProperty(&quot;bootstrap.servers&quot;,&quot;172.16.7.220:9092,172.16.7.221:9092,172.16.7.222:9092&quot;)</span><br><span class="line">    // 随意起个名字</span><br><span class="line">    prop.setProperty(&quot;group.id&quot;,&quot;aaa&quot;)</span><br><span class="line">    // 添加数据源</span><br><span class="line">    val dataStream=env.addSource(new FlinkKafkaConsumer[String](&quot;test&quot;,new SimpleStringSchema(),prop))</span><br><span class="line">    dataStream.print()</span><br><span class="line"></span><br><span class="line">    // 分流</span><br><span class="line">    // 标签</span><br><span class="line">    val classTag = new OutputTag[String](&quot;class&quot;)</span><br><span class="line">    val scoreTag = new OutputTag[String](&quot;score&quot;)</span><br><span class="line">    val studentTag= new OutputTag[String](&quot;student&quot;)</span><br><span class="line"></span><br><span class="line">    // 数据跟标签定义关系匹配</span><br><span class="line">    val myStream = dataStream.process(new ProcessFunction[String,String] &#123;</span><br><span class="line">      override def processElement(i: String, context: ProcessFunction[String, String]#Context, collector: Collector[String]): Unit = &#123;</span><br><span class="line">        val obj=JsonParser.parseString(i).getAsJsonObject</span><br><span class="line">        val table=obj.get(&quot;table&quot;).getAsString // 获取表明</span><br><span class="line">        val data=obj.getAsJsonObject(&quot;data&quot;).toString //获取它的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(table.equals(&quot;tb_class&quot;))&#123;</span><br><span class="line">          context.output(classTag,data)</span><br><span class="line">        &#125;</span><br><span class="line">        else if(table.equals(&quot;tb_score&quot;))&#123;</span><br><span class="line">          context.output(scoreTag,data)</span><br><span class="line">        &#125;</span><br><span class="line">        else if(table.equals(&quot;tb_student&quot;))&#123;</span><br><span class="line">          context.output(studentTag,data)</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">          collector.collect(data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 获取输出流</span><br><span class="line">    val classStream = myStream.getSideOutput(classTag)</span><br><span class="line">    val scoreStream = myStream.getSideOutput(scoreTag)</span><br><span class="line">    val studentStream = myStream.getSideOutput(studentTag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 写入</span><br><span class="line">    classStream.addSink(new FlinkKafkaProducer[String](&quot;dim_class&quot;,new SimpleStringSchema(),prop))</span><br><span class="line">    scoreStream.addSink(new FlinkKafkaProducer[String](&quot;dim_score&quot;,new SimpleStringSchema(),prop))</span><br><span class="line">    studentStream.addSink(new FlinkKafkaProducer[String](&quot;dim_student&quot;,new SimpleStringSchema(),prop))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute(&quot;Task4&quot;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>成功标识就是像这样子卡着不动就可以了，要是出现一大堆东西就是报错了<br><img src="/../img/big_data/phase3/1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="关于import选择"><a href="#关于import选择" class="headerlink" title="关于import选择"></a>关于import选择</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>如果没有那就统一默认选择第一个</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>1.<br><img src="/../img/big_data/phase3/code_1.jpg" alt="OIP _3_.jpg"><br>2.<br><img src="/../img/big_data/phase3/code_2.jpg" alt="OIP _3_.jpg"><br>3.<br><img src="/../img/big_data/phase3/code_3.jpg" alt="OIP _3_.jpg"><br>4.<br><img src="/../img/big_data/phase3/code_4.jpg" alt="OIP _3_.jpg"><br>5.<br><img src="/../img/big_data/phase3/code_5.jpg" alt="OIP _3_.jpg"><br>6.<br><img src="/../img/big_data/phase3/code_8.jpg" alt="OIP _3_.jpg"><br>7.<br><img src="/../img/big_data/phase3/code_6.jpg" alt="OIP _3_.jpg"><br>8.<br><img src="/../img/big_data/phase3/code_7.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>查看安装的库(也叫主题)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper master:2181 --list</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="如果有报错的方法解决"><a href="#如果有报错的方法解决" class="headerlink" title="如果有报错的方法解决"></a>如果有报错的方法解决</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>方法一:把&#x2F;tmp&#x2F;kafka-logs整个删掉就行了（每台机子都要删）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于kafka 如果有问题要诊断的时候，把启动命令中的-daemon去掉，这样就会在控制台输出详细的日志了</span><br></pre></td></tr></table></figure></li><li>方法二:<ol><li>停掉所有的kafka <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-stop.sh</span><br></pre></td></tr></table></figure></li><li>master运行 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkCli.sh</span><br></pre></td></tr></table></figure></li><li>输入下面命令回车即可 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deleteall /brokers/topics/__consumer_offsets</span><br></pre></td></tr></table></figure></li><li>退出 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure></li><li>重启kafka <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.properties</span><br></pre></td></tr></table></figure></li></ol></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="报错二，如果上面这个方法还不可以试一下这个（注意：要是两个都不得多半是你安装服务安装错了）"><a href="#报错二，如果上面这个方法还不可以试一下这个（注意：要是两个都不得多半是你安装服务安装错了）" class="headerlink" title="报错二，如果上面这个方法还不可以试一下这个（注意：要是两个都不得多半是你安装服务安装错了）"></a>报错二，如果上面这个方法还不可以试一下这个（注意：要是两个都不得多半是你安装服务安装错了）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>清理错误的kafka安装残留信息：<br>进到zkCli.sh里面清理安装残留<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkCli.sh</span><br></pre></td></tr></table></figure>在ZOOKEEPER命令行依次执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /brokers</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /consumers</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /admin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /config</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /controller_epoch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmr /controller</span><br></pre></td></tr></table></figure>退出<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>然后删除kafka-logs文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /tmp/kafka-logs</span><br></pre></td></tr></table></figure>最后在重启一下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.properties</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="写入数据（发送端）"><a href="#写入数据（发送端）" class="headerlink" title="写入数据（发送端）"></a>写入数据（发送端）</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>在master里面模拟一个生产者生产变动</li><li>成功标记就是出来一个箭头标记就表示成功了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list master:9092 --topic test</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="多开一两个master来当消费者（接收端）"><a href="#多开一两个master来当消费者（接收端）" class="headerlink" title="多开一两个master来当消费者（接收端）"></a>多开一两个master来当消费者（接收端）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>再开一台机子然后直接键入即可</li><li>成功标识就是什么都没有得了<br>dim_class<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server master:9092 --topic dim_class --from-beginning</span><br></pre></td></tr></table></figure>dim_score<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server master:9092 --topic dim_score --from-beginning</span><br></pre></td></tr></table></figure>dim_student<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server master:9092 --topic dim_student --from-beginning</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="临时数据"><a href="#临时数据" class="headerlink" title="临时数据"></a>临时数据</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>“注意有一些是class和score还有student的”</p><ol><li>这数据要一条一条的插入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_class&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;cid&quot;:1,&quot;cname&quot;:&quot;Class#1&quot;,&quot;specialty&quot;:&quot;人工智能&quot;,&quot;school&quot;:&quot;武汉职业技术学院&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_class&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;cid&quot;:2,&quot;cname&quot;:&quot;Class#2&quot;,&quot;specialty&quot;:&quot;人工智能&quot;,&quot;school&quot;:&quot;武汉职业技术学院&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_class&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;cid&quot;:3,&quot;cname&quot;:&quot;Class#3&quot;,&quot;specialty&quot;:&quot;人工智能&quot;,&quot;school&quot;:&quot;广西职业技术学院&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_score&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;cid&quot;:4,&quot;cname&quot;:&quot;Class#4&quot;,&quot;specialty&quot;:&quot;人工智能&quot;,&quot;school&quot;:&quot;武汉职业技术学院&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_score&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;cid&quot;:5,&quot;cname&quot;:&quot;Class#5&quot;,&quot;specialty&quot;:&quot;人工智能&quot;,&quot;school&quot;:&quot;武汉职业技术学院&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_student&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;sid&quot;:1,&quot;sname&quot;:&quot;jack&quot;,&quot;sex&quot;:0,&quot;birthday&quot;:&quot;2000-12-13&quot;,&quot;phone&quot;:&quot;134343434444&quot;,&quot;address&quot;:&quot;襄阳&quot;,&quot;scid&quot;:2,&quot;reg_date&quot;:&quot;2022-09-13&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;database&quot;:&quot;shtd_student&quot;,&quot;table&quot;:&quot;tb_student&quot;,&quot;type&quot;:&quot;insert&quot;,&quot;ts&quot;:1634004537,&quot;xid&quot;:1231232,&quot;commit&quot;:true,&quot;data&quot;:&#123;&quot;sid&quot;:2,&quot;sname&quot;:&quot;rose&quot;,&quot;sex&quot;:0,&quot;birthday&quot;:&quot;2000-12-13&quot;,&quot;phone&quot;:&quot;134343434444&quot;,&quot;address&quot;:&quot;襄阳&quot;,&quot;scid&quot;:2,&quot;reg_date&quot;:&quot;2022-09-13&quot;&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="修改mySQL配置文件"><a href="#修改mySQL配置文件" class="headerlink" title="修改mySQL配置文件"></a>修改mySQL配置文件</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>编辑MySQL配置文件 &#x2F;etc&#x2F;my.cnf，在结尾添加即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">binlog-do-db=shtd_student</span><br></pre></td></tr></table></figure></li><li>然后重启mysql<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装maxwell"><a href="#安装maxwell" class="headerlink" title="安装maxwell"></a>安装maxwell</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>先到mysort下在安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf maxwell-1.29.0.tar.gz -C /usr/local/src/</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv maxwell-1.29.0/ maxwell</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#MAXWELL</span><br><span class="line">export MAXWELL_HOME=/usr/local/src/maxwell</span><br><span class="line">export PATH=:$PATH:$MAXWELL_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="配置maxwell里面的config-properties-example文件"><a href="#配置maxwell里面的config-properties-example文件" class="headerlink" title="配置maxwell里面的config.properties.example文件"></a>配置maxwell里面的config.properties.example文件</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先cp一下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp config.properties.example config.properties</span><br></pre></td></tr></table></figure></li><li>vi进去修改配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi config.properties</span><br></pre></td></tr></table></figure>这地方一共有两个地方要配</li><li>kafka.bootstrap.servers&#x3D;localhost:9092改为每一台机子的主机名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka.bootstrap.servers=master:9092,slave1:9092,slave2:9092</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>还要新增一个topic（在kafka.bootstrap.servers 下面新增即可）<br>test是你之前设置的那个主题名称<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka_topic=test</span><br></pre></td></tr></table></figure></li><li>mysql的用户和密码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use:root</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password:你设置的密码</span><br></pre></td></tr></table></figure>mysql里面的host因为我是在本机操作所以不用修改，如果mysql在另一台机子上就要改为相应的IP地址</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>没修过的<br><img src="/../img/big_data/phase3/2.jpg" alt="OIP _3_.jpg"><br>修改后的<br><img src="/../img/big_data/phase3/3.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动maxwell"><a href="#启动maxwell" class="headerlink" title="启动maxwell"></a>启动maxwell</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxwell --config /usr/local/src/maxwell/config.properties -daemon</span><br></pre></td></tr></table></figure><p>如果出现报错用这个试一下</p><ol><li>首先你先进入msyql里面执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pMysql123...</span><br></pre></td></tr></table></figure></li><li>然后在mysql中设置时区，默认为SYSTEM<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global time_zone=&#x27;+8:00&#x27;;</span><br></pre></td></tr></table></figure>最后在启动一次maxwell看看<br>成功标识是在最后一行出行一（ Binlog connected.）就是表示成功了</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>在mysql中设置时区<br><img src="/../img/big_data/phase3/3.jpg" alt="OIP _3_.jpg"><br>报错部分<br><img src="/../img/big_data/phase3/4.jpg" alt="OIP _3_.jpg"><br>成功表示<br><img src="/../img/big_data/phase3/6.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h3 id="最后执行生产者和消费者的步骤就ok了，还有去Navicat里面插入数据看看（注意：每条数据对应每一台机子）"><a href="#最后执行生产者和消费者的步骤就ok了，还有去Navicat里面插入数据看看（注意：每条数据对应每一台机子）" class="headerlink" title="最后执行生产者和消费者的步骤就ok了，还有去Navicat里面插入数据看看（注意：每条数据对应每一台机子）"></a>最后执行生产者和消费者的步骤就ok了，还有去Navicat里面插入数据看看（注意：每条数据对应每一台机子）</h3>]]></content>
      
      
      <categories>
          
          <category> Spark数据抽取3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark数据抽取3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark数据抽取2</title>
      <link href="/2023/09/26/Spark%E7%BC%96%E5%86%99-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-2/"/>
      <url>/2023/09/26/Spark%E7%BC%96%E5%86%99-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-2/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据阶段二的第二部分"><a href="#大数据阶段二的第二部分" class="headerlink" title="大数据阶段二的第二部分"></a>大数据阶段二的第二部分</h1><h2 id="抽取ds-db01库中product-info的全量数据进入Hive的ods库中表product-info，字段名称、类型不变。根据ods-product-info表中production-date，同时添加动态分区，分区字段为year、month（将production-date拆分为year和month），类型为int。使用-hive-cli执行-show-partitions-ods-product-info命令"><a href="#抽取ds-db01库中product-info的全量数据进入Hive的ods库中表product-info，字段名称、类型不变。根据ods-product-info表中production-date，同时添加动态分区，分区字段为year、month（将production-date拆分为year和month），类型为int。使用-hive-cli执行-show-partitions-ods-product-info命令" class="headerlink" title="抽取ds_db01库中product_info的全量数据进入Hive的ods库中表product_info，字段名称、类型不变。根据ods.product_info表中production_date，同时添加动态分区，分区字段为year、month（将production_date拆分为year和month），类型为int。使用 hive cli执行 show partitions ods.product_info命令;"></a>抽取ds_db01库中product_info的全量数据进入Hive的ods库中表product_info，字段名称、类型不变。根据ods.product_info表中production_date，同时添加动态分区，分区字段为year、month（将production_date拆分为year和month），类型为int。使用 hive cli执行 show partitions ods.product_info命令;</h2><h1 id="首先将product-info这个表修改一下字段"><a href="#首先将product-info这个表修改一下字段" class="headerlink" title="首先将product_info这个表修改一下字段"></a>首先将product_info这个表修改一下字段</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><h3 id="将表明修改为对应的product-info"><a href="#将表明修改为对应的product-info" class="headerlink" title="将表明修改为对应的product_info"></a>将表明修改为对应的product_info</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将`db_dbs`.`Untitled`修改为product_info</span><br></pre></td></tr></table></figure><ol><li>将char修改为string<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char修改为string</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将smallint修改为int</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将tinyint修改为int</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将decimal修改为double</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将enum修改为string</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将datetime修改为timestamp</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将text修改为string</span><br></pre></td></tr></table></figure></li><li>在结尾添加分区<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">partitioned by (year int,month int) row format delimited fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="剩下没有说到的就原封不动"><a href="#剩下没有说到的就原封不动" class="headerlink" title="剩下没有说到的就原封不动"></a>剩下没有说到的就原封不动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product_info (</span><br><span class="line">   product_id int,</span><br><span class="line">   product_core string,</span><br><span class="line">   product_name string,</span><br><span class="line">   bar_code string,</span><br><span class="line">   brand_id int,</span><br><span class="line">   one_category_id int,</span><br><span class="line">   two_category_id int,</span><br><span class="line">   three_category_id int,</span><br><span class="line">   supplier_id int,</span><br><span class="line">   price double,</span><br><span class="line">   average_cost double,</span><br><span class="line">   publish_status int,</span><br><span class="line">   audit_status int,</span><br><span class="line">   weight float,</span><br><span class="line">   length float,</span><br><span class="line">   height float,</span><br><span class="line">   width float,</span><br><span class="line">   color_type string,</span><br><span class="line">   production_date timestamp,</span><br><span class="line">   shelf_life int,</span><br><span class="line">   descript string,</span><br><span class="line">   indate timestamp,</span><br><span class="line">   modified_time timestamp</span><br><span class="line">   ) partitioned by (year int,month int) row format delimited fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li>没有修改过的表<br><img src="/../img/big_data/phase2/8.jpg" alt="OIP _3_.jpg"></li><li>修改过的表<br><img src="/../img/big_data/phase2/9.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="master工作"><a href="#master工作" class="headerlink" title="master工作"></a>master工作</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>首先启动一下hadoop<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure></li><li>进入hive里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure></li><li>进到hive里面先use到ods你都库里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ods;</span><br></pre></td></tr></table></figure></li><li>将你修改好product_info的表放进来运行一下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE product_info (</span><br><span class="line">   product_id int,</span><br><span class="line">   product_core string,</span><br><span class="line">   product_name string,</span><br><span class="line">   bar_code string,</span><br><span class="line">   brand_id int,</span><br><span class="line">   one_category_id int,</span><br><span class="line">   two_category_id int,</span><br><span class="line">   three_category_id int,</span><br><span class="line">   supplier_id int,</span><br><span class="line">   price double,</span><br><span class="line">   average_cost double,</span><br><span class="line">   publish_status int,</span><br><span class="line">   audit_status int,</span><br><span class="line">   weight float,</span><br><span class="line">   length float,</span><br><span class="line">   height float,</span><br><span class="line">   width float,</span><br><span class="line">   color_type string,</span><br><span class="line">   production_date timestamp,</span><br><span class="line">   shelf_life int,</span><br><span class="line">   descript string,</span><br><span class="line">   indate timestamp,</span><br><span class="line">   modified_time timestamp</span><br><span class="line">   ) partitioned by (year int,month int) row format delimited fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure></li><li>可以用desc product_info查看一下字段<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看到有year和month就得了</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.jnds</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object task02 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    // 声明一个变量,创建一个spark的会话</span><br><span class="line">    val sparkSession=SparkSession.builder()</span><br><span class="line">      // 随机起一个任务名字</span><br><span class="line">      .appName(&quot;Task2&quot;)</span><br><span class="line">      // 这个是要启动到hive</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      // 启用动态分区的</span><br><span class="line">      .config(&quot;hive.exec.dynamic.partition&quot;,&quot;true&quot;)</span><br><span class="line">      .config(&quot;hive.exec.dynamic.partition.mode&quot;,&quot;nonstrict&quot;)</span><br><span class="line">      // 将获取现有的SparkSession，或者，如果没有现有的a，则基于构建器中设置的选项创建一个新的a。</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    // 创建一个到mysql的连接(数据源)</span><br><span class="line">    val customerDF=sparkSession.read.format(&quot;jdbc&quot;)</span><br><span class="line">      // user</span><br><span class="line">      .option(&quot;user&quot;,&quot;root&quot;)</span><br><span class="line">      // password</span><br><span class="line">      .option(&quot;password&quot;,&quot;Mysql123...&quot;)</span><br><span class="line">      // url</span><br><span class="line">      .option(&quot;url&quot;,&quot;jdbc:mysql://172.16.7.220/db_dbs&quot;)</span><br><span class="line">      // 告诉它从哪里拿数据</span><br><span class="line">      .option(&quot;dbtable&quot;,&quot;product_info&quot;)</span><br><span class="line">      // 读取</span><br><span class="line">      .load()</span><br><span class="line">    // 建立一个零时表，将数据放这个数据放到这个零时表里面，名字随意</span><br><span class="line">    customerDF.createOrReplaceTempView(&quot;product_info_tmp&quot;)</span><br><span class="line">    // 把数据放到hive里面的ods库里面</span><br><span class="line">    sparkSession.sql(&quot;use ods&quot;)</span><br><span class="line">    // 查数据,product_info表，</span><br><span class="line">    sparkSession.sql(&quot;INSERT INTO product_info partition (year,month) SELECT *,YEAR(production_date),MONTH(production_date) FROM product_info_tmp&quot;)</span><br><span class="line">    // 链接关闭</span><br><span class="line">    sparkSession.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="弄完这次构建一下，然后scp拷贝到master里面"><a href="#弄完这次构建一下，然后scp拷贝到master里面" class="headerlink" title="弄完这次构建一下，然后scp拷贝到master里面"></a>弄完这次构建一下，然后scp拷贝到master里面</h3><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="在master运行一下"><a href="#在master运行一下" class="headerlink" title="在master运行一下"></a>在master运行一下</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>直接键入即可,注意看文件名，这个文件名每个人不一样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark-submit --master yarn --class org.jnds.task02 /tmp/unnamed.jar </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="然后进入到hive里面验证一下"><a href="#然后进入到hive里面验证一下" class="headerlink" title="然后进入到hive里面验证一下"></a>然后进入到hive里面验证一下</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>直接键入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure></li><li>use到ods库里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ods;</span><br></pre></td></tr></table></figure></li><li>select * from 查看数据<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from product_info</span><br></pre></td></tr></table></figure></li><li>用这条 show partitions ods.product_info 命令然后截图即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show partitions ods.product_info</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase2/7.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="最后你还可以通过图像界面来查看"><a href="#最后你还可以通过图像界面来查看" class="headerlink" title="最后你还可以通过图像界面来查看"></a>最后你还可以通过图像界面来查看</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>你直接到你的浏览器输入你的ip地址后面加上9870即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如:172.16.1.1:9870</span><br></pre></td></tr></table></figure></li><li>看到页面之后点击Utilities下面的(Browse the file system)</li><li>点击步骤:<ol><li>use</li><li>hive</li><li>warehouse</li><li>ods.db</li><li>product_info</li><li>year&#x3D;2022</li></ol></li><li>最后就可以看到你的数据了</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>成功界面<br><img src="/../img/big_data/phase2/10.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Spark数据抽取2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark数据抽取2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark数据抽取1</title>
      <link href="/2023/09/25/Spark%E7%BC%96%E5%86%99-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-1/"/>
      <url>/2023/09/25/Spark%E7%BC%96%E5%86%99-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-1/</url>
      
        <content type="html"><![CDATA[<h1 id="大数据阶段二-1"><a href="#大数据阶段二-1" class="headerlink" title="大数据阶段二-1"></a>大数据阶段二-1</h1><h1 id="阶段二-任务一的要求"><a href="#阶段二-任务一的要求" class="headerlink" title="阶段二-任务一的要求"></a>阶段二-任务一的要求</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务一：数据抽取</span><br><span class="line">使用Scala编写spark工程代码，将MySQL的ds_db01库中表customer_inf、order_detail、order_master、product_info的数据增量抽取到Hive的ods库</span><br><span class="line">(需自建)中对应表customer_inf、order_detail、order_master、product_info中。</span><br><span class="line"></span><br><span class="line">1、抽取ds_db01库中customer_inf的增量数据进入Hive的ods库中表customer_inf。根据ods.customer_inf表中modified_time作为增量字段，只将新增的数据抽入，字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前日期的前一天日期(分区字段格式为yyyyMMdd)。使用 hive cli执行 show partitions ods.customer_inf命令;</span><br><span class="line"></span><br><span class="line">2、抽取ds_db01库中product_info的全量数据进入Hive的ods库中表product_info，字段名称、类型不变。根据ods.product_info表中production_date，同时添加动态分区，分区字段为year、month（将production_date拆分为year和month），类型为int。使用 hive cli执行 show partitions ods.product_info命令;</span><br><span class="line"></span><br><span class="line">3、抽取ds_db01库中order_detail的全量数据进入Hive的ods库中表order_detail。字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前日期的前一天日期(分区字段格式为yyyyMMdd)。使用 hive cli执行 show partitions ods.order_detail命令;</span><br><span class="line"></span><br><span class="line">4、抽取ds_db01库中order_master的部分数据进入Hive的ods库中表order_master。根据ods.order_master表中province作为判断字段，只将上海市和浙江省的数据抽入，字段名称、类型不变，同时添加动态分区，分区字段为province，类型为String。使用 hive cli执行 show partitions ods.order_master命令;</span><br><span class="line"></span><br><span class="line">任务二：</span><br><span class="line">请使用Flume采集18888端口的实时数据流并存入Kafka中名为flume的Topic中。运行数据生成脚本后，使用kafka-console-consumer.sh显示接收到的数据。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="修改customer-inf表"><a href="#修改customer-inf表" class="headerlink" title="修改customer_inf表"></a>修改customer_inf表</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><h2 id="你可以先将它复制到记事本-然后记得把所有的”-96-”去掉"><a href="#你可以先将它复制到记事本-然后记得把所有的”-96-”去掉" class="headerlink" title="你可以先将它复制到记事本 然后记得把所有的”&#96;”去掉"></a>你可以先将它复制到记事本 然后记得把所有的”&#96;”去掉</h2><ol><li>修改里面的varchar和char类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把varchar和char改为 string</span><br></pre></td></tr></table></figure></li><li>修改里面的tinyint类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把tinyint改为 int</span><br></pre></td></tr></table></figure></li><li>修改里面的datatime类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把datatime改为 timestamp</span><br></pre></td></tr></table></figure></li><li>修改里面的decimal类型<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把decima改为 double</span><br></pre></td></tr></table></figure></li><li>新增字段<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">partitioned by (etl_date string) row format delimited fields terminated by &#x27;,&#x27; lines terminated by &quot;\n&quot;;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><h2 id="没修改的样子"><a href="#没修改的样子" class="headerlink" title="没修改的样子"></a>没修改的样子</h2><p><img src="/../img/big_data/phase2/1.jpg" alt="OIP _3_.jpg"></p><h2 id="修改过的效果"><a href="#修改过的效果" class="headerlink" title="修改过的效果"></a>修改过的效果</h2><p><img src="/../img/big_data/phase2/2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将修改过的customer-inf表放进hive里面执行"><a href="#将修改过的customer-inf表放进hive里面执行" class="headerlink" title="将修改过的customer_inf表放进hive里面执行"></a>将修改过的customer_inf表放进hive里面执行</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>首先启动master并且查看一些hadoop有没有启动</li><li>之后直接：hive</li><li>然后在hive里面创建ods的库,创建完出现个ok就行了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database ods;</span><br></pre></td></tr></table></figure></li><li>切换到ods的库里面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use ods;</span><br></pre></td></tr></table></figure></li><li>然后可以使用 hive cli执行 show partitions ods.customer_inf命令; 出行一个ok即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show partitions ods.customer_inf;</span><br></pre></td></tr></table></figure></li><li>最后将你修改好的customer_inf直接复制进去即可,出现ok就表示成功了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE customer_inf  (</span><br><span class="line">  customer_inf_id int,</span><br><span class="line">  customer_id int,</span><br><span class="line">  customer_name string,</span><br><span class="line">  identity_card_type int,</span><br><span class="line">  identity_card_no string,</span><br><span class="line">  mobile_phone string,</span><br><span class="line">  customer_email string,</span><br><span class="line">  gender string,</span><br><span class="line">  customer_point int,</span><br><span class="line">  register_time timestamp,</span><br><span class="line">  birthday timestamp,</span><br><span class="line">  customer_level int,</span><br><span class="line">  customer_money double,</span><br><span class="line">  modified_time timestamp</span><br><span class="line">) partitioned by (etl_date string) row format delimited fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br></pre></td></tr></table></figure></li><li>可是因为还没有导入数据所以里面什么也没有,但是你可以通过 desc customer_inf查看一下字段<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc customer_inf</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li>将customer_inf表放进新建的ods库里面<br><img src="/../img/big_data/phase2/3.jpg" alt="OIP _3_.jpg"></li><li>查看字段<br><img src="/../img/big_data/phase2/4.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="代码段导入数据"><a href="#代码段导入数据" class="headerlink" title="代码段导入数据"></a>代码段导入数据</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><h2 id="数据抽取代码部分一"><a href="#数据抽取代码部分一" class="headerlink" title="数据抽取代码部分一"></a>数据抽取代码部分一</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.jnds</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object task1 &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    // 创建一个是spark的会话  sparkSession是个名字想起什么都可以你记得就得了</span><br><span class="line">    val sparkSession=SparkSession.builder()</span><br><span class="line">      // 任务的名字起啥都可以</span><br><span class="line">      .appName(&quot;Task1&quot;)</span><br><span class="line">      // 启动到hive里面</span><br><span class="line">      .enableHiveSupport()</span><br><span class="line">      // 将获取现有的SparkSession，或者，如果没有现有的a，则基于构建器中设置的选项创建一个新的a。</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    // 创建一个到mysql的连接（数据源）</span><br><span class="line">    val customerDf=sparkSession.read.format(&quot;jdbc&quot;)</span><br><span class="line">      // 数据库名称</span><br><span class="line">      .option(&quot;user&quot;,&quot;root&quot;)</span><br><span class="line">      // 数据库密码 密码是你自己设置的</span><br><span class="line">      .option(&quot;password&quot;,&quot;Mysql123...&quot;)</span><br><span class="line">      // 这个比如master的ip</span><br><span class="line">      .option(&quot;url&quot;,&quot;jdbc:mysql://172.16.7.220/db&quot;)</span><br><span class="line">      // 告诉它从哪里读取数据</span><br><span class="line">      .option(&quot;dbtable&quot;,&quot;(SELECT * FROM customer_inf WHERE modified_time&gt;&#x27;2022-05-01 00:00:00&#x27;) as t1&quot;)</span><br><span class="line">      // 读取</span><br><span class="line">      .load()</span><br><span class="line">    // 建立一个临时表存储读出来的数据</span><br><span class="line">    customerDf.createOrReplaceTempView(&quot;customer_inf_tmp&quot;)</span><br><span class="line">    // 把数据放到hive中</span><br><span class="line">    sparkSession.sql(&quot;use ods&quot;)</span><br><span class="line">    // 插数据</span><br><span class="line">    sparkSession.sql(&quot;INSERT INTO customer_inf partition (etl_date=&#x27;20230703&#x27;) SELECT * FROM customer_inf_tmp&quot;)</span><br><span class="line">    // 连接关闭</span><br><span class="line">    sparkSession.stop()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="从IDEA里面scp到master里面"><a href="#从IDEA里面scp到master里面" class="headerlink" title="从IDEA里面scp到master里面"></a>从IDEA里面scp到master里面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp .\task2.jar root@172.16.7.220:/tmp </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="到msater里面跑任务"><a href="#到msater里面跑任务" class="headerlink" title="到msater里面跑任务"></a>到msater里面跑任务</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>跑任务<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark-submit --master yarn --class com.jnds.task1 /tmp/task2.jar </span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>成功表示<br><img src="/../img/big_data/phase2/5.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="然后hive进去查看有没有导入成功"><a href="#然后hive进去查看有没有导入成功" class="headerlink" title="然后hive进去查看有没有导入成功"></a>然后hive进去查看有没有导入成功</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li><p>先</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 你键的库名</span><br></pre></td></tr></table></figure></li><li><p>查看数据是否放成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from customer_inf</span><br></pre></td></tr></table></figure></li><li><p>最后输入这条命令然后截图,看到有这个就是算完成了(etl_date&#x3D;20230703)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show partitions ods.customer_inf;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase2/6.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Spark数据抽取1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark数据抽取1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop-服务安装</title>
      <link href="/2023/09/23/hadoop-%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/"/>
      <url>/2023/09/23/hadoop-%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前置环境准备"><a href="#前置环境准备" class="headerlink" title="前置环境准备"></a>前置环境准备</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所需文件：Mysoft 获取到文件之后 请放入master中的根目录下</span><br><span class="line">文件下载好在win下后键入：scp [Mysoft路径] root@[master的ip]:/</span><br><span class="line">[按需求替换内容即可]</span><br><span class="line">注意：mysort文件是放进&quot; / &quot;目录下去</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要关闭防火墙按顺序输入命令即可</span><br><span class="line">firewall-cmd --state 查看防火墙状态</span><br><span class="line">systemctl stop firewalld.service 停止firewall</span><br><span class="line">systemctl disable firewalld.service 禁止firewall开机启动</span><br><span class="line"></span><br><span class="line">需要准备好三台虚拟机，都安装好Centos7系统，并用SSH工具连接好三台虚拟机。</span><br><span class="line">推荐使用：Xshell</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="https://img1.imgtp.com/2023/09/09/unOo66Go.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="修改主机名（三台，分别是master，slave1-slave2）"><a href="#修改主机名（三台，分别是master，slave1-slave2）" class="headerlink" title="修改主机名（三台，分别是master，slave1,slave2）"></a>修改主机名（三台，分别是master，slave1,slave2）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>需要准备好三台虚拟机，都安装好Centos7系统，并用SSH工具连接好三台虚拟机。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master: hostnamectl set-hostname master</span><br><span class="line">slave1: hostnamectl set-hostname slave1</span><br><span class="line">slave2: hostnamectl set-hostname slave2</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="在master的-x2F-etc-x2F-hosts中配置主机名和IP解析"><a href="#在master的-x2F-etc-x2F-hosts中配置主机名和IP解析" class="headerlink" title="在master的&#x2F;etc&#x2F;hosts中配置主机名和IP解析"></a>在master的&#x2F;etc&#x2F;hosts中配置主机名和IP解析</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用 vi &#x2F;etc&#x2F;hosts</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 在末尾添加主机名IP与解析</li><li>例如：127.0.0.1 master</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/hadoop/1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="配置免密"><a href="#配置免密" class="headerlink" title="配置免密"></a>配置免密</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按需求键入命令即可</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa [键入此命令之后一直回车即可]</span><br><span class="line">ssh-copy-id -i root@master</span><br><span class="line">ssh-copy-id -i root@slave1</span><br><span class="line">ssh-copy-id -i root@slave2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装JDk"><a href="#安装JDk" class="headerlink" title="安装JDk"></a>安装JDk</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进进入&#x2F;Mysoft解压JDK</li><li>键入tar -xzvf jdk-8u212-linux-x64.tar.gz -C &#x2F;usr&#x2F;local&#x2F;src</li><li>[命令解析] tar -xzvf [JDK路径] -C [解压路径]</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量"><a href="#添加系统变量" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#JAVA</span><br><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_212</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量"><a href="#刷新环境变量" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新两台slave机器的变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查安装"><a href="#检查安装" class="headerlink" title="检查安装"></a>检查安装</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>用java -version校验一下是否成功，能输出JAVA版本号就是安装成功了。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将jdk、环境变量、hosts文件拷贝到两台slave中"><a href="#将jdk、环境变量、hosts文件拷贝到两台slave中" class="headerlink" title="将jdk、环境变量、hosts文件拷贝到两台slave中"></a>将jdk、环境变量、hosts文件拷贝到两台slave中</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li><p>拷贝slave1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/jdk1.8.0_212/ slave1:/usr/local/src/</span><br><span class="line">scp /root/.bash_profile slave1:/root/.bash_profile</span><br><span class="line">scp /etc/hosts slave1:/etc/hosts</span><br></pre></td></tr></table></figure></li><li><p>拷贝slave2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/jdk1.8.0_212/ slave2:/usr/local/src/</span><br><span class="line">scp /root/.bash_profile slave2:/root/.bash_profile</span><br><span class="line">scp /etc/hosts slave2:/etc/hosts</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="完成后到slave1、slave2检查下jdk的安装"><a href="#完成后到slave1、slave2检查下jdk的安装" class="headerlink" title="完成后到slave1、slave2检查下jdk的安装"></a>完成后到slave1、slave2检查下jdk的安装</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新两台slave机器的变量使其生效</li><li>才能使用java -version校验一下是否成功</li><li>能输出JAVA版本号就是安装成功了。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压Hadoop<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.1.3.tar.gz -C /usr/local/src/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-1"><a href="#添加系统变量-1" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Hadoop</span><br><span class="line">export HADOOP_HOME=/usr/local/src/hadoop-3.1.3</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量-1"><a href="#刷新环境变量-1" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查安装-1"><a href="#检查安装-1" class="headerlink" title="检查安装"></a>检查安装</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>用hadoop version校验安装是否成功，出现版本号就是成功了</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="编辑hadoop配置文件"><a href="#编辑hadoop配置文件" class="headerlink" title="编辑hadoop配置文件"></a>编辑hadoop配置文件</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>注意先到hadoop目录下：cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用：vi /usr/local/src/hadoop-3.1.3/etc/hadoop/workers  后面这个是那些文件的目录</span><br><span class="line"></span><br><span class="line">1. core-site.xml</span><br><span class="line">2. hdfs-site.xml</span><br><span class="line">3. mapred-site.xml</span><br><span class="line">4. yarn-site.xml</span><br><span class="line">5. workers localhost删掉 替换文件所有内容</span><br><span class="line">6. hadoop-env.sh找对应行添加或直接在最后加</span><br></pre></td></tr></table></figure><ol><li>进入&#x2F;usr&#x2F;local&#x2F;src&#x2F;hadoop-3.1.3&#x2F;etc&#x2F;hadoop&#x2F;目录，编辑以下配置文件</li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/core-site.xml">https://dl.shenyi.ink/?f=/big_data/hadoop/core-site.xml</a></li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/hdfs-site.xml">https://dl.shenyi.ink/?f=/big_data/hadoop/hdfs-site.xml</a></li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/mapred-site.xml">https://dl.shenyi.ink/?f=/big_data/hadoop/mapred-site.xml</a></li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/yarn-site.xml">https://dl.shenyi.ink/?f=/big_data/hadoop/yarn-site.xml</a></li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/workers">https://dl.shenyi.ink/?f=/big_data/hadoop/workers</a></li><li>localhost删掉 替换文件所有内容</li><li><a href="https://dl.shenyi.ink/?f=/big_data/hadoop/hadoop-env.sh">https://dl.shenyi.ink/?f=/big_data/hadoop/hadoop-env.sh</a></li><li>localhost删掉 替换文件所有内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="把hadoop和环境变量传输到两个slave"><a href="#把hadoop和环境变量传输到两个slave" class="headerlink" title="把hadoop和环境变量传输到两个slave"></a>把hadoop和环境变量传输到两个slave</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/hadoop-3.1.3/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/hadoop-3.1.3/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/.bash_profile</span><br><span class="line">scp /root/.bash_profile slave2:/root/.bash_profile</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将两台slave机器的变量刷新"><a href="#将两台slave机器的变量刷新" class="headerlink" title="将两台slave机器的变量刷新"></a>将两台slave机器的变量刷新</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="格式化hdfs（master）"><a href="#格式化hdfs（master）" class="headerlink" title="格式化hdfs（master）"></a>格式化hdfs（master）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>键入hdfs namenode -format</li><li>注意成功标识：Storage directory &#x2F;opt&#x2F;data&#x2F;hadoop&#x2F;dfs&#x2F;name has been successfully formatted.</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="运行hadoop（master）"><a href="#运行hadoop（master）" class="headerlink" title="运行hadoop（master）"></a>运行hadoop（master）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>键入start-all.sh</li><li>输入完成后，直接键入jps，出现6个东西就对了</li><li>注意：每台机子都要去看一下是否成功</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/hadoop/3.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压mysql-5.7.42-1.el7.x86_64.rpm-bundle.tar</li><li>键入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvf mysql-5.7.42-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure></li><li>这次不需要制定路径 直接解压到Mysoft里即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="使用yum安装MySQL"><a href="#使用yum安装MySQL" class="headerlink" title="使用yum安装MySQL"></a>使用yum安装MySQL</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>直接输入即可:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-&#123;server,client,common,libs&#125;-*</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>设置开机自启动：systemctl enable mysqld.service</li><li>启动mysql：systemctl start mysqld.service</li><li>查看是否启动（绿色的标志就是启动成功）：systemctl status mysqld.service</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/mysql/1.PNG" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="获取mysql初始密码"><a href="#获取mysql初始密码" class="headerlink" title="获取mysql初始密码"></a>获取mysql初始密码</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>这里有两个办法（建议用第二个）</p><ol><li>第一个办法：直接去看log文件 [cat &#x2F;var&#x2F;log&#x2F;mysql.log | grep password]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /var/log/mysql.log | grep password</span><br></pre></td></tr></table></figure></li><li>第二个办法：直接查找 [grep “password is generated” &#x2F;var&#x2F;log&#x2F;mysqld.log | awk ‘{print $NF}’]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &quot;password is generated&quot; /var/log/mysqld.log | awk &#x27;&#123;print $NF&#125;&#x27;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/mysql/2.PNG" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="初始化密码"><a href="#初始化密码" class="headerlink" title="初始化密码"></a>初始化密码</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>键入mysql_secure_installation即可</li><li>之后输入获得到初始密码 然后输入新的密码 例如：123456 输入两次 然后 再输入两次</li><li>最后的y&#x2F;n 依照顺序 y y n y y</li><li>密码必须要设置复杂性大写字母和数字以及符号</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入mysql设置权限"><a href="#进入mysql设置权限" class="headerlink" title="进入mysql设置权限"></a>进入mysql设置权限</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>输入密码进入mysql：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pMysql123...</span><br></pre></td></tr></table></figure></li><li>直接在mysql shell键入 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;用户名&#x27;@&#x27;%&#x27; identified by &#x27;登录密码&#x27; with grant option</span><br></pre></td></tr></table></figure></li><li>做完这些然后输入一个 “;”之后出现一个ok就得了</li><li>然后在输入：flush privileges 还是输入”;”之后出现一个ok就得了</li><li>最后输入：exit退出就好了</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/mysql/3.PNG" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装hive"><a href="#安装hive" class="headerlink" title="安装hive"></a>安装hive</h1><h2 id="进入Mysoft解压hive"><a href="#进入Mysoft解压hive" class="headerlink" title="进入Mysoft解压hive"></a>进入Mysoft解压hive</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /usr/local/src</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv apache-hive-3.1.2-bin hive</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-2"><a href="#添加系统变量-2" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#hive</span><br><span class="line">export HIVE_HOME=/usr/local/src/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新系统变量"><a href="#刷新系统变量" class="headerlink" title="刷新系统变量"></a>刷新系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="在hive的conf目录下-新建hive-site-xml"><a href="#在hive的conf目录下-新建hive-site-xml" class="headerlink" title="在hive的conf目录下 新建hive-site.xml"></a>在hive的conf目录下 新建hive-site.xml</h2><p>下载hive-site-xml路径3:<a href="https://dl.shenyi.ink/?f=/big_data/hive/hive-site.xml">https://dl.shenyi.ink/?f=/big_data/hive/hive-site.xml</a></p><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>hive-site.xml 下载此文件 并修改里面的内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch hive-site.xml</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将java连接mysql的驱动包拷贝到hive下的lib目录下"><a href="#将java连接mysql的驱动包拷贝到hive下的lib目录下" class="headerlink" title="将java连接mysql的驱动包拷贝到hive下的lib目录下"></a>将java连接mysql的驱动包拷贝到hive下的lib目录下</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>直接把复制即可</p><ol><li>键入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /mysort/mysql-connector-java-5.1.37.jar /usr/local/src/hive/lib/ </span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将java连接mysql的驱动包拷贝到hive下的lib目录下-1"><a href="#将java连接mysql的驱动包拷贝到hive下的lib目录下-1" class="headerlink" title="将java连接mysql的驱动包拷贝到hive下的lib目录下"></a>将java连接mysql的驱动包拷贝到hive下的lib目录下</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先位于hive根目录:cd ..</li><li>再键入</li><li>rm lib&#x2F;guava-19.0.jar 后面出现一串东西直接输入 y 即可</li><li>直接键入即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/src/hadoop-3.1.3/share/hadoop/common/lib/guava-27.0-jre.jar /usr/local/src/hive/lib/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="修改hive配置文件"><a href="#修改hive配置文件" class="headerlink" title="修改hive配置文件"></a>修改hive配置文件</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi conf/hive-site.xml </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li><img src="/../img/big_data/phase1/hive/1.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="把hive和环境变量传输到两个slave"><a href="#把hive和环境变量传输到两个slave" class="headerlink" title="把hive和环境变量传输到两个slave"></a>把hive和环境变量传输到两个slave</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>slave1<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/hive/ slave1:/usr/local/src/</span><br></pre></td></tr></table></figure></li><li>slave2<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/hive/ slave2:/usr/local/src/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="初始化mysql的数据架构-最后成功的效果"><a href="#初始化mysql的数据架构-最后成功的效果" class="headerlink" title="初始化mysql的数据架构 最后成功的效果"></a>初始化mysql的数据架构 最后成功的效果</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>键入：schematool -dbType mysql -initSchema  即可<br>提示Initialization script completed就可以了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/hive/2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="校验hive安装（确保hadoop已经启动）"><a href="#校验hive安装（确保hadoop已经启动）" class="headerlink" title="校验hive安装（确保hadoop已经启动）"></a>校验hive安装（确保hadoop已经启动）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>键入 hive</li><li>看到hive&gt;后，输入show databases;</li><li>看到输出即为安装hive成功</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/hive/3.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压zookeeper 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/src</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv apache-zookeeper-3.5.7-bin zookeeper</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-3"><a href="#添加系统变量-3" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#zookeeper</span><br><span class="line">export ZOOKEEPER_HOME=/usr/local/src/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量-2"><a href="#刷新环境变量-2" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入zookeeper的conf下改配置"><a href="#进入zookeeper的conf下改配置" class="headerlink" title="进入zookeeper的conf下改配置"></a>进入zookeeper的conf下改配置</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>将zoo_sample.cfg改名zoo.conf，然后编辑zoo.cfg<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li><li>将下面这些直接复制进去即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/local/src/zookeeper/data</span><br><span class="line">dataLogDir=/usr/local/src/zookeeper/logs</span><br><span class="line">server.1=master:2888:3888</span><br><span class="line">server.2=slave1:2888:3888</span><br><span class="line">server.3=slave2:2888:3888</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="创建对应的数据目录-初始化id"><a href="#创建对应的数据目录-初始化id" class="headerlink" title="创建对应的数据目录 初始化id"></a>创建对应的数据目录 初始化id</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><h3 id="这是都是直接键入即可"><a href="#这是都是直接键入即可" class="headerlink" title="这是都是直接键入即可"></a>这是都是直接键入即可</h3><ol><li>cd ..<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir data logs</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /usr/local/src/zookeeper/data/myid</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将配置好的ZOOKEEPER和环境变量-scp到slave1和slave2"><a href="#将配置好的ZOOKEEPER和环境变量-scp到slave1和slave2" class="headerlink" title="将配置好的ZOOKEEPER和环境变量 scp到slave1和slave2"></a>将配置好的ZOOKEEPER和环境变量 scp到slave1和slave2</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/zookeeper/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/zookeeper/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/</span><br><span class="line">scp /root/.bash_profile slave2:/root/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="修改对应机器的myid文件-改为2和3"><a href="#修改对应机器的myid文件-改为2和3" class="headerlink" title="修改对应机器的myid文件 改为2和3"></a>修改对应机器的myid文件 改为2和3</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>去到slave1运行：（slave1）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 2 &gt; /usr/local/src/zookeeper/data/myid</span><br></pre></td></tr></table></figure></li><li>去到slave2运行：（slave2）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 3 &gt; /usr/local/src/zookeeper/data/myid </span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="三台机器分别运行-zkServer-sh-start"><a href="#三台机器分别运行-zkServer-sh-start" class="headerlink" title="三台机器分别运行 zkServer.sh start"></a>三台机器分别运行 zkServer.sh start</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>每台机子都要先刷新环境变量</li><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li><li>最后在用：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/zookeeper/1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>运行完毕后 分别运行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure></li><li>查看状态 应该是1个leader和2个follower就对了</li><li>这一步如果出错了不压迫管他直接跳过</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装hbase"><a href="#安装hbase" class="headerlink" title="安装hbase"></a>安装hbase</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压hbase 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf hbase-2.2.3-bin.tar.gz -C /usr/local/src/</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv hbase-2.2.3 hbase</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-4"><a href="#添加系统变量-4" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#hbase</span><br><span class="line">export HBASE_HOME=/usr/local/src/hbase</span><br><span class="line">export PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量-3"><a href="#刷新环境变量-3" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入hbase-x2F-conf目录-分别修改hbase-env-sh和hbase-site-xml"><a href="#进入hbase-x2F-conf目录-分别修改hbase-env-sh和hbase-site-xml" class="headerlink" title="进入hbase&#x2F;conf目录 分别修改hbase-env.sh和hbase-site.xml"></a>进入hbase&#x2F;conf目录 分别修改hbase-env.sh和hbase-site.xml</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>hbase-env.sh （找到对应行修改）</li><li>注意：你vi进去之后直接&#x2F;搜关键词，然后在它的下面把配置复制进去即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_212</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br></pre></td></tr></table></figure></li><li>hbase-site.xml<br>这个文件就是直接复制进去，如果没有这个文件就新建hbase-site.xml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi hbase-site.xml</span><br></pre></td></tr></table></figure><a href="https://dl.shenyi.ink/?f=/big_data/hbase/hbase-site.xml">https://dl.shenyi.ink/?f=/big_data/hbase/hbase-site.xml</a></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="修改regionservers-配置集群"><a href="#修改regionservers-配置集群" class="headerlink" title="修改regionservers 配置集群"></a>修改regionservers 配置集群</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>vi regionservers</li><li>进去直接将第一个删掉把下面的slave1和slave2加上去即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将配置好的HBase和环境变量-scp到slave1和slave2"><a href="#将配置好的HBase和环境变量-scp到slave1和slave2" class="headerlink" title="将配置好的HBase和环境变量 scp到slave1和slave2"></a>将配置好的HBase和环境变量 scp到slave1和slave2</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/hbase/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/hbase/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/</span><br><span class="line">scp /root/.bash_profile slave2:/root/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先cd ..回去 </li><li>start-hbase.sh</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查-1"><a href="#检查-1" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果没有出错 运行jps查看是否有HMaster或者HRegionServer，有的话就是启动成功了</span><br><span class="line">运行hbase shell即可进入命令行，看到hbase(main):001:0即为成功。</span><br><span class="line">接着输入list_namespace出现default和hbase两个namespace，这一步就彻底成功了。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/hbase/1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装flink"><a href="#安装flink" class="headerlink" title="安装flink"></a>安装flink</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压hbase 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf flink-1.14.0-bin-scala_2.12.tgz -C /usr/local/src</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv flink-1.14.0/ flink</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-5"><a href="#添加系统变量-5" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#flink</span><br><span class="line">export FLINK_HOME=/usr/local/src/flink</span><br><span class="line">export PATH=$PATH:$FLINK_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量-4"><a href="#刷新环境变量-4" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入flink-x2F-conf目录下-编辑flink-conf-yaml和workers"><a href="#进入flink-x2F-conf目录下-编辑flink-conf-yaml和workers" class="headerlink" title="进入flink&#x2F;conf目录下 编辑flink-conf.yaml和workers"></a>进入flink&#x2F;conf目录下 编辑flink-conf.yaml和workers</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>vi进去修改flink-conf.yaml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jobmanager.rpc.address: master （特别注意冒号后的空格，绝对不能省略！）</span><br><span class="line">classloader.check-leaked-classloader: false 这个如果找不到直接在最后加即可</span><br></pre></td></tr></table></figure></li><li>vi进去修改workers (填入所有的节点主机名)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将配置好的flink和环境变量-scp到slave1和slave2"><a href="#将配置好的flink和环境变量-scp到slave1和slave2" class="headerlink" title="将配置好的flink和环境变量 scp到slave1和slave2"></a>将配置好的flink和环境变量 scp到slave1和slave2</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先cd ..回去再复制<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/flink/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/flink/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/</span><br><span class="line">scp /root/.bash_profile slave2:/root/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>运行start-cluster.sh 输出三个机器的starting即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="https://img1.imgtp.com/2023/09/06/b2sGBwPB.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查-2"><a href="#检查-2" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完成后，运行jps，看到master上诱StandaloneSessionClusterEntrypoint和TaskManagerRunner</span><br><span class="line">就是运行成功了。也可以用浏览器访问master节点的8081端口，能看到web管理界面也是</span><br><span class="line">成功了。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/flink/2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="跑任务"><a href="#跑任务" class="headerlink" title="跑任务"></a>跑任务</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">接着需要跑内置测试案例（比赛需要截图）</span><br><span class="line">内置的案例在flink目录下的examples目录里，需要关注batch（批处理）和streaming（流处</span><br><span class="line">理）目录</span><br></pre></td></tr></table></figure><ol><li><p>跑batch案例的方式：</p><ol><li>跑batch案例的方式：</li><li>stop-cluster.sh</li><li>stop-cluster.sh</li><li>flink run -m yarn-cluster &#x2F;usr&#x2F;local&#x2F;src&#x2F;flink&#x2F;examplebatch&#x2F;WordCount.jar</li></ol></li><li><p>link集群模式（flink集群需启动，hadoop无需启动） “建议用这一个”</p><ol><li>start-cluster.sh</li><li>直接复制用这个无需启动hadoop：flink run &#x2F;usr&#x2F;local&#x2F;src&#x2F;flink&#x2F;examples&#x2F;batch&#x2F;WordCount.jar</li><li>WordCount的运行结果是输出一堆(单词,数量)就对了</li></ol></li><li><p>跑streaming案例的方式：开一个新的ssh，运行 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -l -p 18888 (如果nc没找到，yum install nc)</span><br></pre></td></tr></table></figure></li><li><p>在原来的ssh中运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flink run /usr/local/src/flink/examples/streaming/SocketWindowWordCount.jar --hostname master --port 18888</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">到nc的ssh中，输入几个单词即可，例如jack tom jack jack smith love love help word</span><br><span class="line">然后可以在网页控制台中，task manager,逐个点开节点，看stdout，哪个有内容就截图哪个</span><br><span class="line">截完图后记得取消任务（Running Job-&gt;Cancel）</span><br></pre></td></tr></table></figure></li></ol><h2 id="要是出错了也不管它"><a href="#要是出错了也不管它" class="headerlink" title="要是出错了也不管它"></a>要是出错了也不管它</h2><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装spark"><a href="#安装spark" class="headerlink" title="安装spark"></a>安装spark</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>安装spark<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-3.1.1-bin-hadoop3.2.tgz -C /usr/local/src</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv spark-3.1.1-bin-hadoop3.2/ spark</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-6"><a href="#添加系统变量-6" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#spark</span><br><span class="line">export SPARK_HOME=/usr/local/src/spark</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入spark的conf目录下-编辑spark-env-sh和workers"><a href="#进入spark的conf目录下-编辑spark-env-sh和workers" class="headerlink" title="进入spark的conf目录下 编辑spark-env.sh和workers"></a>进入spark的conf目录下 编辑spark-env.sh和workers</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>spark-env.sh<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure></li><li>将下面的配置直接添加到最后即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/src/jdk1.8.0_212</span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line">export SPARK_CONF_DIR=/usr/local/src/spark/conf</span><br><span class="line">export HADOOP_CONF_DIR=/usr/local/src/hadoop-3.1.3/etc/hadoop/</span><br></pre></td></tr></table></figure></li><li>workers<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp workers.template workers</span><br></pre></td></tr></table></figure></li><li>进去之后把最后面的localhost删掉加上下面的配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="cp将hive的conf下面的hive-site-xml拷到spark的conf下面"><a href="#cp将hive的conf下面的hive-site-xml拷到spark的conf下面" class="headerlink" title="cp将hive的conf下面的hive-site.xml拷到spark的conf下面"></a>cp将hive的conf下面的hive-site.xml拷到spark的conf下面</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /usr/local/src/hive/conf/hive-site.xml /usr/local/src/spark/conf/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><p>将mysql-connector-java-5.1.37.jar 拷贝到sparl下面的jars下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /mysort/mysql-connector-java-5.1.37.jar /usr/local/src/spark/jars/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将配置好的spark和环境变量-scp到slave1和slave2"><a href="#将配置好的spark和环境变量-scp到slave1和slave2" class="headerlink" title="将配置好的spark和环境变量 scp到slave1和slave2"></a>将配置好的spark和环境变量 scp到slave1和slave2</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先cd ..回去<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/spark/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/spark/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/</span><br><span class="line">scp /root/.bash_profile slave2:/root/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入spark&#x2F;sbin目录，运行.&#x2F;start-all.sh</li><li>(一定要进来了再运行，要不启动的是hadoop)</li><li>进去之后直接运行: .&#x2F;start-all.sh</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查-3"><a href="#检查-3" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完毕后jps看看，master中有Master和Worker就对了。浏览器访问master的8080也可以看到</span><br><span class="line">状态</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/spark/1.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="跑任务-1"><a href="#跑任务-1" class="headerlink" title="跑任务"></a>跑任务</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><h3 id="接着需要跑内置测试案例-（比赛需要截图）"><a href="#接着需要跑内置测试案例-（比赛需要截图）" class="headerlink" title="接着需要跑内置测试案例 （比赛需要截图）"></a>接着需要跑内置测试案例 （比赛需要截图）</h3><ol><li>spark on yarn（spark集群无需启动，但 需启动hadoop）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark-submit --master yarn --class org.apache.spark.examples.SparkPi /usr/local/src/spark/examples/jars/spark-examples_2.12-3.1.1.jar 100</span><br></pre></td></tr></table></figure></li><li>spark集群模式（spark集群需启动，hadoop无需启动）</li><li>建议先用这个因为不用启动hadoop<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spark-submit --master spark://master:7077 --class org.apache.spark.examples.SparkPi /usr/local/src/spark/examples/jars/spark-examples_2.12-3.1.1.jar 100</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行的输出结果类似于Pi is roughly 3.142xxxxxxxxx就对了，比赛截图需要前后多几行。</span><br><span class="line">补充说明：运行spark/bin目录下的spark-shell可以进入spark的命令行。</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/spark/2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装flume"><a href="#安装flume" class="headerlink" title="安装flume"></a>安装flume</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压flume 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-flume-1.9.0-bin.tar.gz -C /usr/local/src/</span><br><span class="line">cd /usr/local/src</span><br><span class="line">mv apache-flume-1.9.0-bin flume</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-7"><a href="#添加系统变量-7" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#flume</span><br><span class="line">export FLUME_HOME=/usr/local/src/flume</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="接下来配置采集器内容-配置文件都放在flume-x2F-conf目录里-新建port-conf和file-conf"><a href="#接下来配置采集器内容-配置文件都放在flume-x2F-conf目录里-新建port-conf和file-conf" class="headerlink" title="接下来配置采集器内容 配置文件都放在flume&#x2F;conf目录里 新建port.conf和file.conf"></a>接下来配置采集器内容 配置文件都放在flume&#x2F;conf目录里 新建port.conf和file.conf</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch port.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch file.conf</span><br></pre></td></tr></table></figure><ol><li><a href="https://dl.shenyi.ink/?f=/big_data/flume/port.conf">https://dl.shenyi.ink/?f=/big_data/flume/port.conf</a></li><li><a href="https://dl.shenyi.ink/?f=/big_data/flume/port.conf">https://dl.shenyi.ink/?f=/big_data/flume/port.conf</a></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动flume测试"><a href="#启动flume测试" class="headerlink" title="启动flume测试"></a>启动flume测试</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li><p>测试网络监听(直接复制即可)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume-ng agent -c conf -f /usr/local/src/flume/conf/port.conf --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><ol><li>然后去另外两台机子输入：yum install -y nc</li><li>之后输入：nc master 18888</li><li>最后退出直接Ctrl+C即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">从任意一台机器，用nc连接到master的18888端口：nc master 18888</span><br><span class="line"></span><br><span class="line">然后随便输入一些东西回车，看master的flume上是否有收到数据</span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试文件变化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flume-ng agent -c conf -f /usr/local/src/flume/conf/file.conf --name a2 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><ol><li>再开一个ssh链接到master，运行echo “test” &gt;&gt; &#x2F;tmp&#x2F;test.txt 看看flume上是否有检测到变化<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;test&quot; &gt;&gt; /tmp/test.txt</span><br></pre></td></tr></table></figure></li></ol></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li>slave1输入的<br><img src="/../img/big_data/phase1/flume/1.jpg" alt="OIP _3_.jpg"></li><li>master看到的<br><img src="/../img/big_data/phase1/flume/2.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压kafka 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf kafka_2.12-2.4.1.tgz -C /usr/local/src/</span><br><span class="line">cd /usr/local/src/</span><br><span class="line">mv kafka_2.12-2.4.1/ kafka</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="添加系统变量-8"><a href="#添加系统变量-8" class="headerlink" title="添加系统变量"></a>添加系统变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用vi &#x2F;root&#x2F;.bash_profile</li><li>[键盘Shift+G处于最底部、键盘O回车一行] 末尾处添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#kafka</span><br><span class="line">export KAFKA_HOME=/usr/local/src/kafka</span><br><span class="line">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="刷新环境变量-5"><a href="#刷新环境变量-5" class="headerlink" title="刷新环境变量"></a>刷新环境变量</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用source &#x2F;root&#x2F;.bash_profile</li><li>或者. &#x2F;root&#x2F;.bash_profile 即可刷新系统变量使其生效</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="进入kafka下config目录中-编辑server-properties-（master-slave1-slave2-都要编辑）"><a href="#进入kafka下config目录中-编辑server-properties-（master-slave1-slave2-都要编辑）" class="headerlink" title="进入kafka下config目录中 编辑server.properties （master slave1 slave2 都要编辑）"></a>进入kafka下config目录中 编辑server.properties （master slave1 slave2 都要编辑）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>server.properties （有的直接改，没有的新增）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch server.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">broker.id=1 (master是1，slave1是2，slave2是3)</span><br><span class="line">hostname=172.16.x.x（分别是各个机器的IP）</span><br><span class="line">zookeeper.connect=master:2181,slave1:2181,slave2:2181</span><br><span class="line">listeners=PLAINTEXT://0.0.0.0:9092</span><br><span class="line">advertised.listeners=PLAINTEXT://172.16.100.1:9092（分别是各个机器的IP）</span><br><span class="line">advertised.host.name=master（分别是各个机器的机器名）</span><br></pre></td></tr></table></figure></li><li>如果有一些没有的话直接就复制即可</li><li>第三个和第四个不用修改，记得要对应每一台机子的ip以及其他配置</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li><img src="/../img/big_data/phase1/kafka/1.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="将配置好的kafka和环境变量-scp到slave1和slave2"><a href="#将配置好的kafka和环境变量-scp到slave1和slave2" class="headerlink" title="将配置好的kafka和环境变量 scp到slave1和slave2"></a>将配置好的kafka和环境变量 scp到slave1和slave2</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -r /usr/local/src/kafka/ slave1:/usr/local/src</span><br><span class="line">scp -r /usr/local/src/kafka/ slave2:/usr/local/src</span><br><span class="line">scp /root/.bash_profile slave1:/root/</span><br><span class="line">scp /root/.bash_profile slave2:/root/</span><br></pre></td></tr></table></figure><ol><li>分别对应修改两台slave上的server.properties。</li><li>cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;kafka&#x2F;config&#x2F;</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>接下来可以启动kafka（确保ZOOKEEPER正常运行了，三台机器都要运行）：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon /usr/local/src/kafka/config/server.properties</span><br></pre></td></tr></table></figure></li><li>启动后，运行jps，查看是否有kafka和QuorumPeerMain（这个是ZOOKEEPER的进程）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="/../img/big_data/phase1/kafka/2.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装Clickhouse"><a href="#安装Clickhouse" class="headerlink" title="安装Clickhouse"></a>安装Clickhouse</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>进入&#x2F;Mysoft解压Clickhouse 并 重命名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf clickhouse-common-static-21.9.6.24.tgz -C /tmp</span><br><span class="line">tar -zxvf clickhouse-client-21.9.6.24.tgz -C /tmp</span><br><span class="line">tar -zxvf clickhouse-server-21.9.6.24.tgz -C /tmp</span><br></pre></td></tr></table></figure></li><li>依次安装common、client、server<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh /tmp/clickhouse-common-static-21.9.6.24/install/doinst.sh</span><br><span class="line">sh /tmp/clickhouse-client-21.9.6.24/install/doinst.sh</span><br><span class="line">sh /tmp/clickhouse-server-21.9.6.24/install/doinst.sh</span><br></pre></td></tr></table></figure></li><li>前两个运行没有任何提示就是成功了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第三个sh的，运行后会询问default user的密码，按比赛要求输入密码。接着会询问是否允许远</span><br><span class="line">程连接，输入y。</span><br><span class="line">密码设置看个人</span><br><span class="line"></span><br><span class="line">安装完成后，为了后续配置方便，给相关文件夹777权限。</span><br><span class="line">chmod -R 777 /var/lib/clickhouse/ /var/log/clickhouse-server/ /etc/clickhouse-server/ /etc/clickhouse-client/</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="需要修改配置-特别是要改端口（要不会和hadoop的9000端口冲突）"><a href="#需要修改配置-特别是要改端口（要不会和hadoop的9000端口冲突）" class="headerlink" title="需要修改配置 特别是要改端口（要不会和hadoop的9000端口冲突）"></a>需要修改配置 特别是要改端口（要不会和hadoop的9000端口冲突）</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>vi &#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml</li><li>config.xml （直接改对应行，去掉注释，修改内容）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;listen_host&gt;::&lt;/listen_host&gt;</span><br><span class="line">&lt;timezone&gt;Asia/Shanghai&lt;/timezone&gt;</span><br><span class="line">&lt;tcp_port&gt;9002&lt;/tcp_port&gt;</span><br></pre></td></tr></table></figure></li><li>可以直接在vi里用&#x2F;查找</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li><img src="/../img/big_data/phase1/clickhouse/1.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>systemctl enable clickhouse-server</li><li>systemctl start clickhouse-server</li><li>没有任何东西出现就OK了</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查-4"><a href="#检查-4" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>启动后，使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clickhouse-client -h 172.16.100.1 --port 9002 -u default --password 你设置的密码</span><br></pre></td></tr></table></figure></li><li>连接到数据库，出现master：就是成功了 可以输入show databases;查看数据库</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li><img src="/../img/big_data/phase1/clickhouse/2.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="特殊情况-如果你不记得密码了"><a href="#特殊情况-如果你不记得密码了" class="headerlink" title="特殊情况 如果你不记得密码了"></a>特殊情况 如果你不记得密码了</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clickhouse 用户信息 在配置文件/etc/clickhouse-server/users.xml里</span><br><span class="line">可以通过修改这个配置文件 修改密码</span><br><span class="line">clickhouse默认密码加密传输，所以我们要设置密文，使用加密算法sha256</span><br><span class="line">密码生成可以使用命令</span><br></pre></td></tr></table></figure><ol><li>echo -n 密码 | sha256sum | tr -d ‘-‘</li><li>如 echo -n a123b456 | sha256sum | tr -d ‘-‘</li><li>则会输 5b28b1d5ee792ea157182cfd12caec6c31cb1a689f21b4a9b71bc7dc5c057223</li><li>使用vi命令修改文件 vi &#x2F;etc&#x2F;clickhouse-server&#x2F;users.xml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用/找到密码位置，注释掉，添加我们的新密码</span><br><span class="line">&lt;password_sha256_hex&gt;5b28b1d5ee792ea157182cfd12caec6c31cb1a689f21b4a9b71bc7dc5c057223&lt;/password_sha256_hex&gt;</span><br><span class="line"></span><br><span class="line">如果你记得密码 这一步可以忘掉</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>比赛不涉及redis安装</li><li>环境准备<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf redis-6.2.6.tar.gz -C /usr/local/src/</span><br><span class="line">cd /usr/local/src/</span><br><span class="line">mv redis-6.2.6/ redis</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="接着安装编译环境"><a href="#接着安装编译环境" class="headerlink" title="接着安装编译环境"></a>接着安装编译环境</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>这两条可直接复制即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd redis/src</span><br><span class="line">make PREFIX=/usr/redis install</span><br><span class="line">完成后redis就编译好了 位于cd /usr/redis/bin</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>使用默认配置文件即可：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/redis/bin/redis-server /usr/local/src/redis/redis.conf &gt;&gt; /dev/null &amp;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="检查-5"><a href="#检查-5" class="headerlink" title="检查"></a>检查</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>启动后，使用连接测试即可</li><li>.&#x2F;redis-cli</li><li>出现127.0.0.1:6379&gt;即为成功</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h2 id="如何在master直接启动"><a href="#如何在master直接启动" class="headerlink" title="如何在master直接启动"></a>如何在master直接启动</h2><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><ol><li>先回到master，然后进行：<ol><li>vi &#x2F;root&#x2F;.bash_profile 配置一下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#redis</span><br><span class="line">export REDIS_HOME=/usr/redis/</span><br><span class="line">export PATH=$PATH:$REDIS_HOME/bin</span><br></pre></td></tr></table></figure></li></ol></li><li>保存出来刷新一下:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /root/.bash_profile</span><br></pre></td></tr></table></figure></li><li>然后直接就可以启动了:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p>出现127.0.0.1:6379&gt;即为成功</p><ol><li>这个是在这个目录下master启动<br><img src="/../img/big_data/phase1/redis/1.jpg" alt="OIP _3_.jpg"></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> hadoop-服务安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop-服务安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精灵图(sprite)</title>
      <link href="/2023/09/11/%E7%B2%BE%E7%81%B5%E5%9B%BE/"/>
      <url>/2023/09/11/%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">html源码</button></li><li class="tab"><button type="button" data-href="#源码-2">css源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">        /* 宽度 */</span><br><span class="line">        width: 60px;</span><br><span class="line">        /* 高度 */</span><br><span class="line">        height: 60px;</span><br><span class="line">        /* 设置一个边框 */</span><br><span class="line">        outline: 1px solid black;</span><br><span class="line">        margin: 200px;</span><br><span class="line">        /* 照片 */</span><br><span class="line">        background-image: url(../image/index.webp);</span><br><span class="line">        /* 设置x轴：-180px，y轴：0px */</span><br><span class="line">        background-position: -180px 0px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/06/30/ZXt2pLAW.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="zxvf和xvf的区别"><a href="#zxvf和xvf的区别" class="headerlink" title="zxvf和xvf的区别"></a>zxvf和xvf的区别</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf 用于解压 .tar.gz 后缀结尾的</span><br><span class="line">tar -xvf 用于解压 .tar后缀结尾的</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 精灵图(sprite) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精灵图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zoomit快捷方式语法</title>
      <link href="/2023/08/22/Zoomit%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/08/22/Zoomit%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Zoomit地址"><a href="#安装Zoomit地址" class="headerlink" title="安装Zoomit地址"></a>安装Zoomit地址</h1><p><a href="https://learn.microsoft.com/zh-cn/sysinternals/downloads/zoomit">https://learn.microsoft.com/zh-cn/sysinternals/downloads/zoomit</a></p><h1 id="缩放模式"><a href="#缩放模式" class="headerlink" title="缩放模式"></a>缩放模式</h1><ol><li>鼠标向上滚动或向上箭头</li><li>鼠标向下滚动或向上箭头<div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快捷方式:Ctrl+1</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div></li></ol><h1 id="绘制模式-在缩放模式下-和停止模式-在缩放模式下"><a href="#绘制模式-在缩放模式下-和停止模式-在缩放模式下" class="headerlink" title="绘制模式(在缩放模式下)和停止模式(在缩放模式下)"></a>绘制模式(在缩放模式下)和停止模式(在缩放模式下)</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.绘制模式(在缩放模式下)</span><br><span class="line">快捷方式:左键单击</span><br><span class="line">2.停止模式(在缩放模式下)</span><br><span class="line">快捷方式:右键单击</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="绘图模式"><a href="#绘图模式" class="headerlink" title="绘图模式"></a>绘图模式</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">增加/减少线条和光标大小（绘图模式）</span><br><span class="line">快捷方式:Ctrl + 鼠标向上/向下滚动或箭头键</span><br><span class="line"></span><br><span class="line">将光标居中(绘画模式)</span><br><span class="line">快捷方式:空格键</span><br><span class="line"></span><br><span class="line">白板(绘画模式)</span><br><span class="line">快捷方式:W</span><br><span class="line"></span><br><span class="line">Blackboard(绘画模式)</span><br><span class="line">快捷方式:K</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="键入文本"><a href="#键入文本" class="headerlink" title="键入文本"></a>键入文本</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(左对齐)</span><br><span class="line">快捷方式:T</span><br><span class="line"></span><br><span class="line">(右对齐)</span><br><span class="line">快捷方式:Shift + T</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="增加-x2F-减小字号-键入模式"><a href="#增加-x2F-减小字号-键入模式" class="headerlink" title="增加&#x2F;减小字号(键入模式)"></a>增加&#x2F;减小字号(键入模式)</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快捷方式:Ctrl + 鼠标向上/向下滚动或箭头键</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="开始绘制-不在缩放模式下就是比如画笔"><a href="#开始绘制-不在缩放模式下就是比如画笔" class="headerlink" title="开始绘制(不在缩放模式下就是比如画笔)"></a>开始绘制(不在缩放模式下就是比如画笔)</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.快捷方式:Ctrl + 2</span><br><span class="line">画笔颜色:</span><br><span class="line">红色:R</span><br><span class="line">绿色:G</span><br><span class="line">蓝色:B</span><br><span class="line">黄色:Y</span><br><span class="line">橙色:O</span><br><span class="line">粉色:P</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="绘制直线，距形…"><a href="#绘制直线，距形…" class="headerlink" title="绘制直线，距形….."></a>绘制直线，距形…..</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直线:长按Shift</span><br><span class="line"></span><br><span class="line">距形:长按Ctrl</span><br><span class="line"></span><br><span class="line">椭圆形:长按Tab</span><br><span class="line"></span><br><span class="line">箭头:长按Ctrl+Shift</span><br><span class="line"></span><br><span class="line">擦除最后一个绘图:Ctrl + Z</span><br><span class="line"></span><br><span class="line">擦除所有绘图:E</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="截图裁剪模式"><a href="#截图裁剪模式" class="headerlink" title="截图裁剪模式"></a>截图裁剪模式</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将屏幕截图复制到剪贴板:Ctrl + C</span><br><span class="line"></span><br><span class="line">将屏幕截图裁剪到剪贴板:Ctrl + Shift + C</span><br><span class="line"></span><br><span class="line">将屏幕截图另存为PNG:Ctrl + S</span><br><span class="line"></span><br><span class="line">将裁剪的屏幕截图保存到文件:Ctrl + Shift + S</span><br><span class="line"></span><br><span class="line">将屏幕区域复制到剪贴板:Ctrl + 6</span><br><span class="line"></span><br><span class="line">启动/停止全屏录制，保存为 MP4（Windows 10 2019 年 5 月更新及更高版本）:Ctrl + 5</span><br><span class="line"></span><br><span class="line">裁剪屏幕录制，保存为 MP4（Windows 10 2019 年 5 月更新及更高版本）:Ctrl + Shift + 5</span><br><span class="line"></span><br><span class="line">仅录制鼠标所在窗口的屏幕，保存为 MP4（Windows 10 2019 年 5 月更新及更高版本）:Ctrl + Alt + 5</span><br><span class="line"></span><br><span class="line">显示倒计时计时器:Ctrl + 3</span><br><span class="line"></span><br><span class="line">增加/减少时间:Ctrl + 鼠标向上/向下滚动或箭头键</span><br><span class="line"></span><br><span class="line">最小化计时器（而不会暂停）:Alt + Tab</span><br><span class="line"></span><br><span class="line">最小化时显示计时器:左键单击 ZoomIt 图标</span><br><span class="line"></span><br><span class="line">实时缩放模式:Ctrl + 4</span><br><span class="line"></span><br><span class="line">退出所有模式:Esc 或右键单击</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Zoomit快捷方式语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zoomit语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown教程写法</title>
      <link href="/2023/06/30/markdown/"/>
      <url>/2023/06/30/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><!-- **源码** --><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><!-- **渲染演示** --><h2 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h2><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线演示&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">文字**加粗**演示</span><br><span class="line"></span><br><span class="line">文字*斜体*演示</span><br><span class="line"></span><br><span class="line">文本`高亮`演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line">&lt;font size = 5&gt;5号字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;</span><br><span class="line">&lt;font color=blue&gt;蓝色&lt;/font&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;  一级引用演示d</span><br><span class="line">&gt; 二级引用演示</span><br><span class="line">&gt; MySQL</span><br><span class="line">&gt; &gt;markdown</span><br><span class="line">&gt; &gt;</span><br><span class="line">&gt; &gt;markdown语法</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><blockquote><p> 一级引用演示d<br>二级引用演示<br>MySQL</p><blockquote><p>markdown</p><p>markdown语法</p></blockquote></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* html</span><br><span class="line">* css</span><br><span class="line"></span><br><span class="line">+ PHP</span><br><span class="line">+ Python</span><br><span class="line"></span><br><span class="line">- MySQL</span><br><span class="line">- Linux</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ul><li>html</li><li>css</li></ul><ul><li>PHP</li><li>Python</li></ul><ul><li>MySQL</li><li>Linux</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要注意后面有空格</span><br><span class="line">1. 1</span><br><span class="line">2. 2</span><br><span class="line">3. 3</span><br><span class="line">4. 4</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><ol><li>html</li><li>css</li><li>JavaScript</li><li>PhP</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 1000,00  | 不错 |</span><br><span class="line">| 2        | 2000,00  | 良好 |</span><br><span class="line">| 3        | 3000,00  | 优秀 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>1000,00</td><td>不错</td></tr><tr><td>2</td><td>2000,00</td><td>良好</td></tr><tr><td>3</td><td>3000,00</td><td>优秀</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="Hexo新建页面"><a href="#Hexo新建页面" class="headerlink" title="Hexo新建页面"></a>Hexo新建页面</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page 后面是你自己想取的名称</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><p><img src="https://img1.imgtp.com/2023/08/06/SyvNnr0m.JPG" alt="OIP _3_.jpg"><br><img src="https://img1.imgtp.com/2023/08/06/l2OIIUav.JPG" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><div class="tabs" id="源码"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#源码-1">源码</button></li><li class="tab"><button type="button" data-href="#源码-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="源码-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 本地图片</span><br><span class="line">&lt;img src=&quot;/source/img/Logo/tup.jpg&quot; alt=&quot;示例图片&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"># 在线图片</span><br><span class="line">![OIP _3_.jpg](https://img1.imgtp.com/2023/06/30/ZXt2pLAW.jpg)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div><div class="tab-item-content" id="源码-2"><!-- # 本地图片<img src="/source/img/Logo/tup.jpg" alt="示例图片" style="zoom:50%;" /> --><h1 id="在线图片"><a href="#在线图片" class="headerlink" title="在线图片"></a>在线图片</h1><p><img src="https://img1.imgtp.com/2023/06/30/ZXt2pLAW.jpg" alt="OIP _3_.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> markdown教程写法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown教程写法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
